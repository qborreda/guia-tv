function createCookie(t,e,i){var n;if(i){var o=new Date;o.setTime(o.getTime()+24*i*60*60*1e3),n="; expires="+o.toGMTString()}else n="";document.cookie=escape(t)+"="+escape(e)+n+"; path=/"}function readCookie(t){for(var e=escape(t)+"=",i=document.cookie.split(";"),n=0;n<i.length;n++){for(var o=i[n];" "===o.charAt(0);)o=o.substring(1,o.length);if(0===o.indexOf(e))return unescape(o.substring(e.length,o.length))}return null}function eraseCookie(t){createCookie(t,"",-1)}function leftPad(t,e){for(var i=t+"";i.length<e;)i="0"+i;return i}!function(t,e,i,n){function o(t,e){var i=Math.max(0,t[0]-e[0],e[0]-t[1]),n=Math.max(0,t[2]-e[1],e[1]-t[3]);return i+n}function s(e,i,n,o){var s=e.length,r=o?"offset":"position";for(n=n||0;s--;){var a=e[s].el?e[s].el:t(e[s]),l=a[r]();l.left+=parseInt(a.css("margin-left"),10),l.top+=parseInt(a.css("margin-top"),10),i[s]=[l.left-n,l.left+a.outerWidth()+n,l.top-n,l.top+a.outerHeight()+n]}}function r(t,e){var i=e.offset();return{left:t.left-i.left,top:t.top-i.top}}function a(t,e,i){e=[e.left,e.top],i=i&&[i.left,i.top];for(var n,s=t.length,r=[];s--;)n=t[s],r[s]=[s,o(n,e),i&&o(n,i)];return r=r.sort(function(t,e){return e[1]-t[1]||e[2]-t[2]||e[0]-t[0]})}function l(e){this.options=t.extend({},u,e),this.containers=[],this.options.rootGroup||(this.scrollProxy=t.proxy(this.scroll,this),this.dragProxy=t.proxy(this.drag,this),this.dropProxy=t.proxy(this.drop,this),this.placeholder=t(this.options.placeholder),e.isValidTarget||(this.options.isValidTarget=n))}function c(e,i){this.el=e,this.options=t.extend({},p,i),this.group=l.get(this.options),this.rootGroup=this.options.rootGroup||this.group,this.handle=this.rootGroup.options.handle||this.rootGroup.options.itemSelector;var n=this.rootGroup.options.itemPath;this.target=n?this.el.find(n):this.el,this.target.on(h.start,this.handle,t.proxy(this.dragInit,this)),this.options.drop&&this.group.containers.push(this)}var h,p={drag:!0,drop:!0,exclude:"",nested:!0,vertical:!0},u={afterMove:function(){},containerPath:"",containerSelector:"ol, ul",distance:0,delay:0,handle:"",itemPath:"",itemSelector:"li",bodyClass:"dragging",draggedClass:"dragged",placeholderClass:"placeholder",isValidTarget:function(){return!0},onCancel:function(){},onDrag:function(t,e){t.css(e)},onDragStart:function(e,i){e.css({height:e.height(),width:e.width()}),e.addClass(i.group.options.draggedClass),t("body").addClass(i.group.options.bodyClass)},onDrop:function(e,i){e.removeClass(i.group.options.draggedClass).removeAttr("style"),t("body").removeClass(i.group.options.bodyClass)},onMousedown:function(t,e,i){return i.target.nodeName.match(/^(input|select|textarea)$/i)?void 0:(i.preventDefault(),!0)},placeholder:'<li class="placeholder"/>',pullPlaceholder:!0,serialize:function(e,i,n){var o=t.extend({},e.data());return n?[i]:(i[0]&&(o.children=i),delete o.subContainers,delete o.sortable,o)},tolerance:0},f={},d=0,g={left:0,top:0,bottom:0,right:0},h={start:"touchstart.sortable mousedown.sortable",drop:"touchend.sortable touchcancel.sortable mouseup.sortable",drag:"touchmove.sortable mousemove.sortable",scroll:"scroll.sortable"},v="subContainers";l.get=function(t){return f[t.group]||(t.group===n&&(t.group=d++),f[t.group]=new l(t)),f[t.group]},l.prototype={dragInit:function(e,i){this.$document=t(i.el[0].ownerDocument),this.item=t(e.target).closest(this.options.itemSelector),this.itemContainer=i,!this.item.is(this.options.exclude)&&this.options.onMousedown(this.item,u.onMousedown,e)&&(this.setPointer(e),this.toggleListeners("on"),this.setupDelayTimer(),this.dragInitDone=!0)},drag:function(t){if(!this.dragging){if(!this.distanceMet(t)||!this.delayMet)return;this.options.onDragStart(this.item,this.itemContainer,u.onDragStart,t),this.item.before(this.placeholder),this.dragging=!0}this.setPointer(t),this.options.onDrag(this.item,r(this.pointer,this.item.offsetParent()),u.onDrag,t);var e=t.pageX||t.originalEvent.pageX,i=t.pageY||t.originalEvent.pageY,o=this.sameResultBox,s=this.options.tolerance;(!o||o.top-s>i||o.bottom+s<i||o.left-s>e||o.right+s<e)&&(this.searchValidTarget()||(this.placeholder.detach(),this.lastAppendedItem=n))},drop:function(t){this.toggleListeners("off"),this.dragInitDone=!1,this.dragging&&(this.placeholder.closest("html")[0]?this.placeholder.before(this.item).detach():this.options.onCancel(this.item,this.itemContainer,u.onCancel,t),this.options.onDrop(this.item,this.getContainer(this.item),u.onDrop,t),this.clearDimensions(),this.clearOffsetParent(),this.lastAppendedItem=this.sameResultBox=n,this.dragging=!1)},searchValidTarget:function(t,e){t||(t=this.relativePointer||this.pointer,e=this.lastRelativePointer||this.lastPointer);for(var i=a(this.getContainerDimensions(),t,e),o=i.length;o--;){var s=i[o][0],l=i[o][1];if(!l||this.options.pullPlaceholder){var c=this.containers[s];if(!c.disabled){if(!this.$getOffsetParent()){var h=c.getItemOffsetParent();t=r(t,h),e=r(e,h)}if(c.searchValidTarget(t,e))return!0}}}this.sameResultBox&&(this.sameResultBox=n)},movePlaceholder:function(t,e,i,n){var o=this.lastAppendedItem;(n||!o||o[0]!==e[0])&&(e[i](this.placeholder),this.lastAppendedItem=e,this.sameResultBox=n,this.options.afterMove(this.placeholder,t,e))},getContainerDimensions:function(){return this.containerDimensions||s(this.containers,this.containerDimensions=[],this.options.tolerance,!this.$getOffsetParent()),this.containerDimensions},getContainer:function(t){return t.closest(this.options.containerSelector).data(i)},$getOffsetParent:function(){if(this.offsetParent===n){var t=this.containers.length-1,e=this.containers[t].getItemOffsetParent();if(!this.options.rootGroup)for(;t--;)if(e[0]!=this.containers[t].getItemOffsetParent()[0]){e=!1;break}this.offsetParent=e}return this.offsetParent},setPointer:function(t){var e=this.getPointer(t);if(this.$getOffsetParent()){var i=r(e,this.$getOffsetParent());this.lastRelativePointer=this.relativePointer,this.relativePointer=i}this.lastPointer=this.pointer,this.pointer=e},distanceMet:function(t){var e=this.getPointer(t);return Math.max(Math.abs(this.pointer.left-e.left),Math.abs(this.pointer.top-e.top))>=this.options.distance},getPointer:function(t){return{left:t.pageX||t.originalEvent.pageX,top:t.pageY||t.originalEvent.pageY}},setupDelayTimer:function(){var t=this;this.delayMet=!this.options.delay,this.delayMet||(clearTimeout(this._mouseDelayTimer),this._mouseDelayTimer=setTimeout(function(){t.delayMet=!0},this.options.delay))},scroll:function(){this.clearDimensions(),this.clearOffsetParent()},toggleListeners:function(e){var i=this,n=["drag","drop","scroll"];t.each(n,function(t,n){i.$document[e](h[n],i[n+"Proxy"])})},clearOffsetParent:function(){this.offsetParent=n},clearDimensions:function(){this.traverse(function(t){t._clearDimensions()})},traverse:function(t){t(this);for(var e=this.containers.length;e--;)this.containers[e].traverse(t)},_clearDimensions:function(){this.containerDimensions=n},_destroy:function(){f[this.options.group]=n}},c.prototype={dragInit:function(t){var e=this.rootGroup;!this.disabled&&!e.dragInitDone&&this.options.drag&&this.isValidDrag(t)&&e.dragInit(t,this)},isValidDrag:function(t){return 1==t.which||"touchstart"==t.type&&1==t.originalEvent.touches.length},searchValidTarget:function(t,e){var i=a(this.getItemDimensions(),t,e),n=i.length,o=this.rootGroup,s=!o.options.isValidTarget||o.options.isValidTarget(o.item,this);if(!n&&s)return o.movePlaceholder(this,this.target,"append"),!0;for(;n--;){var r=i[n][0],l=i[n][1];if(!l&&this.hasChildGroup(r)){var c=this.getContainerGroup(r).searchValidTarget(t,e);if(c)return!0}else if(s)return this.movePlaceholder(r,t),!0}},movePlaceholder:function(e,i){var n=t(this.items[e]),o=this.itemDimensions[e],s="after",r=n.outerWidth(),a=n.outerHeight(),l=n.offset(),c={left:l.left,right:l.left+r,top:l.top,bottom:l.top+a};if(this.options.vertical){var h=(o[2]+o[3])/2,p=i.top<=h;p?(s="before",c.bottom-=a/2):c.top+=a/2}else{var u=(o[0]+o[1])/2,f=i.left<=u;f?(s="before",c.right-=r/2):c.left+=r/2}this.hasChildGroup(e)&&(c=g),this.rootGroup.movePlaceholder(this,n,s,c)},getItemDimensions:function(){return this.itemDimensions||(this.items=this.$getChildren(this.el,"item").filter(":not(."+this.group.options.placeholderClass+", ."+this.group.options.draggedClass+")").get(),s(this.items,this.itemDimensions=[],this.options.tolerance)),this.itemDimensions},getItemOffsetParent:function(){var t,e=this.el;return t="relative"===e.css("position")||"absolute"===e.css("position")||"fixed"===e.css("position")?e:e.offsetParent()},hasChildGroup:function(t){return this.options.nested&&this.getContainerGroup(t)},getContainerGroup:function(e){var o=t.data(this.items[e],v);if(o===n){var s=this.$getChildren(this.items[e],"container");if(o=!1,s[0]){var r=t.extend({},this.options,{rootGroup:this.rootGroup,group:d++});o=s[i](r).data(i).group}t.data(this.items[e],v,o)}return o},$getChildren:function(e,i){var n=this.rootGroup.options,o=n[i+"Path"],s=n[i+"Selector"];return e=t(e),o&&(e=e.find(o)),e.children(s)},_serialize:function(e,i){var n=this,o=i?"item":"container",s=this.$getChildren(e,o).not(this.options.exclude).map(function(){return n._serialize(t(this),!i)}).get();return this.rootGroup.options.serialize(e,s,i)},traverse:function(e){t.each(this.items||[],function(){var i=t.data(this,v);i&&i.traverse(e)}),e(this)},_clearDimensions:function(){this.itemDimensions=n},_destroy:function(){var e=this;this.target.off(h.start,this.handle),this.el.removeData(i),this.options.drop&&(this.group.containers=t.grep(this.group.containers,function(t){return t!=e})),t.each(this.items||[],function(){t.removeData(this,v)})}};var m={enable:function(){this.traverse(function(t){t.disabled=!1})},disable:function(){this.traverse(function(t){t.disabled=!0})},serialize:function(){return this._serialize(this.el,!0)},refresh:function(){this.traverse(function(t){t._clearDimensions()})},destroy:function(){this.traverse(function(t){t._destroy()})}};t.extend(c.prototype,m),t.fn[i]=function(e){var o=Array.prototype.slice.call(arguments,1);return this.map(function(){var s=t(this),r=s.data(i);return r&&m[e]?m[e].apply(r,o)||this:(r||e!==n&&"object"!=typeof e||s.data(i,new c(s,e)),this)})}}(jq111,window,"sortable"),function(t,e,i){"use strict";var n,o,s,r,a,l,c,h,p,u,f,d,g,v,m,b,y,x,S,C,T,w,M,D,P,k,_,$,O,I,H;M={paneClass:"nano-pane",sliderClass:"nano-slider",contentClass:"nano-content",iOSNativeScrolling:!1,preventPageScrolling:!1,disableResize:!1,alwaysVisible:!1,flashDelay:1500,sliderMinHeight:20,sliderMaxHeight:null,documentContext:null,windowContext:null},x="scrollbar",y="scroll",p="mousedown",u="mouseenter",f="mousemove",g="mousewheel",d="mouseup",b="resize",a="drag",l="enter",C="up",m="panedown",s="DOMMouseScroll",r="down",T="wheel",c="keydown",h="keyup",S="touchmove",n="Microsoft Internet Explorer"===e.navigator.appName&&/msie 7./i.test(e.navigator.appVersion)&&e.ActiveXObject,o=null,_=e.requestAnimationFrame,w=e.cancelAnimationFrame,O=i.createElement("div").style,H=function(){var t,e,i,n,o,s;for(n=["t","webkitT","MozT","msT","OT"],t=o=0,s=n.length;s>o;t=++o)if(i=n[t],e=n[t]+"ransform",e in O)return n[t].substr(0,n[t].length-1);return!1}(),I=function(t){return H===!1?!1:""===H?t:H+t.charAt(0).toUpperCase()+t.substr(1)},$=I("transform"),P=$!==!1,D=function(){var t,e,n;return t=i.createElement("div"),e=t.style,e.position="absolute",e.width="100px",e.height="100px",e.overflow=y,e.top="-9999px",i.body.appendChild(t),n=t.offsetWidth-t.clientWidth,i.body.removeChild(t),n},k=function(){var t,i,n;return i=e.navigator.userAgent,(t=/(?=.+Mac OS X)(?=.+Firefox)/.test(i))?(n=/Firefox\/\d{2}\./.exec(i),n&&(n=n[0].replace(/\D+/g,"")),t&&+n>23):!1},v=function(){function c(n,s){this.el=n,this.options=s,o||(o=D()),this.$el=t(this.el),this.doc=t(this.options.documentContext||i),this.win=t(this.options.windowContext||e),this.body=this.doc.find("body"),this.$content=this.$el.children("."+s.contentClass),this.$content.attr("tabindex",this.options.tabIndex||0),this.content=this.$content[0],this.previousPosition=0,this.options.iOSNativeScrolling&&null!=this.el.style.WebkitOverflowScrolling?this.nativeScrolling():this.generate(),this.createEvents(),this.addEvents(),this.reset()}return c.prototype.preventScrolling=function(t,e){if(this.isActive)if(t.type===s)(e===r&&t.originalEvent.detail>0||e===C&&t.originalEvent.detail<0)&&t.preventDefault();else if(t.type===g){if(!t.originalEvent||!t.originalEvent.wheelDelta)return;(e===r&&t.originalEvent.wheelDelta<0||e===C&&t.originalEvent.wheelDelta>0)&&t.preventDefault()}},c.prototype.nativeScrolling=function(){this.$content.css({WebkitOverflowScrolling:"touch"}),this.iOSNativeScrolling=!0,this.isActive=!0},c.prototype.updateScrollValues=function(){var t,e;t=this.content,this.maxScrollTop=t.scrollHeight-t.clientHeight,this.prevScrollTop=this.contentScrollTop||0,this.contentScrollTop=t.scrollTop,e=this.contentScrollTop>this.previousPosition?"down":this.contentScrollTop<this.previousPosition?"up":"same",this.previousPosition=this.contentScrollTop,"same"!==e&&this.$el.trigger("update",{position:this.contentScrollTop,maximum:this.maxScrollTop,direction:e}),this.iOSNativeScrolling||(this.maxSliderTop=this.paneHeight-this.sliderHeight,this.sliderTop=0===this.maxScrollTop?0:this.contentScrollTop*this.maxSliderTop/this.maxScrollTop)},c.prototype.setOnScrollStyles=function(){var t;P?(t={},t[$]="translate(0, "+this.sliderTop+"px)"):t={top:this.sliderTop},_?(w&&this.scrollRAF&&w(this.scrollRAF),this.scrollRAF=_(function(e){return function(){return e.scrollRAF=null,e.slider.css(t)}}(this))):this.slider.css(t)},c.prototype.createEvents=function(){this.events={down:function(t){return function(e){return t.isBeingDragged=!0,t.offsetY=e.pageY-t.slider.offset().top,t.slider.is(e.target)||(t.offsetY=0),t.pane.addClass("active"),t.doc.bind(f,t.events[a]).bind(d,t.events[C]),t.body.bind(u,t.events[l]),!1}}(this),drag:function(t){return function(e){return t.sliderY=e.pageY-t.$el.offset().top-t.paneTop-(t.offsetY||.5*t.sliderHeight),t.scroll(),t.contentScrollTop>=t.maxScrollTop&&t.prevScrollTop!==t.maxScrollTop?t.$el.trigger("scrollend"):0===t.contentScrollTop&&0!==t.prevScrollTop&&t.$el.trigger("scrolltop"),!1}}(this),up:function(t){return function(){return t.isBeingDragged=!1,t.pane.removeClass("active"),t.doc.unbind(f,t.events[a]).unbind(d,t.events[C]),t.body.unbind(u,t.events[l]),!1}}(this),resize:function(t){return function(){t.reset()}}(this),panedown:function(t){return function(e){return t.sliderY=(e.offsetY||e.originalEvent.layerY)-.5*t.sliderHeight,t.scroll(),t.events.down(e),!1}}(this),scroll:function(t){return function(e){t.updateScrollValues(),t.isBeingDragged||(t.iOSNativeScrolling||(t.sliderY=t.sliderTop,t.setOnScrollStyles()),null!=e&&(t.contentScrollTop>=t.maxScrollTop?(t.options.preventPageScrolling&&t.preventScrolling(e,r),t.prevScrollTop!==t.maxScrollTop&&t.$el.trigger("scrollend")):0===t.contentScrollTop&&(t.options.preventPageScrolling&&t.preventScrolling(e,C),0!==t.prevScrollTop&&t.$el.trigger("scrolltop"))))}}(this),wheel:function(t){return function(e){var i;if(null!=e)return i=e.delta||e.wheelDelta||e.originalEvent&&e.originalEvent.wheelDelta||-e.detail||e.originalEvent&&-e.originalEvent.detail,i&&(t.sliderY+=-i/3),t.scroll(),!1}}(this),enter:function(t){return function(e){var i;if(t.isBeingDragged)return 1!==(e.buttons||e.which)?(i=t.events)[C].apply(i,arguments):void 0}}(this)}},c.prototype.addEvents=function(){var t;this.removeEvents(),t=this.events,this.options.disableResize||this.win.bind(b,t[b]),this.iOSNativeScrolling||(this.slider.bind(p,t[r]),this.pane.bind(p,t[m]).bind(""+g+" "+s,t[T])),this.$content.bind(""+y+" "+g+" "+s+" "+S,t[y])},c.prototype.removeEvents=function(){var t;t=this.events,this.win.unbind(b,t[b]),this.iOSNativeScrolling||(this.slider.unbind(),this.pane.unbind()),this.$content.unbind(""+y+" "+g+" "+s+" "+S,t[y])},c.prototype.generate=function(){var t,i,n,s,r,a,l;return s=this.options,a=s.paneClass,l=s.sliderClass,t=s.contentClass,(r=this.$el.children("."+a)).length||r.children("."+l).length||this.$el.append('<div class="'+a+'"><div class="'+l+'" /></div>'),this.pane=this.$el.children("."+a),this.slider=this.pane.find("."+l),0===o&&k()?(n=e.getComputedStyle(this.content,null).getPropertyValue("padding-right").replace(/[^0-9.]+/g,""),i={right:-14,paddingRight:+n+14}):o&&(i={right:-o},this.$el.addClass("has-scrollbar")),null!=i&&this.$content.css(i),this},c.prototype.restore=function(){this.stopped=!1,this.iOSNativeScrolling||this.pane.show(),this.addEvents()},c.prototype.reset=function(){var t,e,i,s,r,a,l,c,h,p,u,f;return this.iOSNativeScrolling?(this.contentHeight=this.content.scrollHeight,void 0):(this.$el.find("."+this.options.paneClass).length||this.generate().stop(),this.stopped&&this.restore(),t=this.content,s=t.style,r=s.overflowY,n&&this.$content.css({height:this.$content.height()}),e=t.scrollHeight+o,p=parseInt(this.$el.css("max-height"),10),p>0&&(this.$el.height(""),this.$el.height(t.scrollHeight>p?p:t.scrollHeight)),l=this.pane.outerHeight(!1),h=parseInt(this.pane.css("top"),10),a=parseInt(this.pane.css("bottom"),10),c=l+h+a,f=Math.round(c/e*c),f<this.options.sliderMinHeight?f=this.options.sliderMinHeight:null!=this.options.sliderMaxHeight&&f>this.options.sliderMaxHeight&&(f=this.options.sliderMaxHeight),r===y&&s.overflowX!==y&&(f+=o),this.maxSliderTop=c-f,this.contentHeight=e,this.paneHeight=l,this.paneOuterHeight=c,this.sliderHeight=f,this.paneTop=h,this.slider.height(f),this.events.scroll(),this.pane.show(),this.isActive=!0,t.scrollHeight===t.clientHeight||this.pane.outerHeight(!0)>=t.scrollHeight&&r!==y?(this.pane.hide(),this.isActive=!1):this.el.clientHeight===t.scrollHeight&&r===y?this.slider.hide():this.slider.show(),this.pane.css({opacity:this.options.alwaysVisible?1:"",visibility:this.options.alwaysVisible?"visible":""}),i=this.$content.css("position"),("static"===i||"relative"===i)&&(u=parseInt(this.$content.css("right"),10),u&&this.$content.css({right:"",marginRight:u})),this)},c.prototype.scroll=function(){return this.isActive?(this.sliderY=Math.max(0,this.sliderY),this.sliderY=Math.min(this.maxSliderTop,this.sliderY),this.$content.scrollTop(this.maxScrollTop*this.sliderY/this.maxSliderTop),this.iOSNativeScrolling||(this.updateScrollValues(),this.setOnScrollStyles()),this):void 0},c.prototype.scrollBottom=function(t){return this.isActive?(this.$content.scrollTop(this.contentHeight-this.$content.height()-t).trigger(g),this.stop().restore(),this):void 0},c.prototype.scrollTop=function(t){return this.isActive?(this.$content.scrollTop(+t).trigger(g),this.stop().restore(),this):void 0},c.prototype.scrollTo=function(t){return this.isActive?(this.scrollTop(this.$el.find(t).get(0).offsetTop),this):void 0},c.prototype.stop=function(){return w&&this.scrollRAF&&(w(this.scrollRAF),this.scrollRAF=null),this.stopped=!0,this.removeEvents(),this.iOSNativeScrolling||this.pane.hide(),this},c.prototype.destroy=function(){return this.stopped||this.stop(),!this.iOSNativeScrolling&&this.pane.length&&this.pane.remove(),n&&this.$content.height(""),this.$content.removeAttr("tabindex"),this.$el.hasClass("has-scrollbar")&&(this.$el.removeClass("has-scrollbar"),this.$content.css({right:""})),this},c.prototype.flash=function(){return!this.iOSNativeScrolling&&this.isActive?(this.reset(),this.pane.addClass("flashed"),setTimeout(function(t){return function(){t.pane.removeClass("flashed")}}(this),this.options.flashDelay),this):void 0},c}(),t.fn.nanoScroller=function(e){return this.each(function(){var i,n;if((n=this.nanoscroller)||(i=t.extend({},M,e),this.nanoscroller=n=new v(this,i)),e&&"object"==typeof e){if(t.extend(n.options,e),null!=e.scrollBottom)return n.scrollBottom(e.scrollBottom);if(null!=e.scrollTop)return n.scrollTop(e.scrollTop);if(e.scrollTo)return n.scrollTo(e.scrollTo);if("bottom"===e.scroll)return n.scrollBottom(0);if("top"===e.scroll)return n.scrollTop(0);if(e.scroll&&e.scroll instanceof t)return n.scrollTo(e.scroll);if(e.stop)return n.stop();if(e.destroy)return n.destroy();if(e.flash)return n.flash()}return n.reset()})},t.fn.nanoScroller.Constructor=v}(jq111,window,document);var Mark={includes:{},globals:{},delimiter:">",compact:!1,_copy:function(t,e){e=e||[];for(var i in t)e[i]=t[i];return e},_size:function(t){return t instanceof Array?t.length:t||0},_iter:function(t,e){this.idx=t,this.size=e,this.length=e,this.sign="#",this.toString=function(){return this.idx+this.sign.length-1}},_pipe:function(t,e){var i,n,o,s;if(i=e.shift()){n=i.split(this.delimiter),o=n.shift().trim();try{s=Mark.pipes[o].apply(null,[t].concat(n)),t=this._pipe(s,e)}catch(r){}}return t},_eval:function(t,e,i){var n,o,s=this._pipe(t,e),r=s,a=-1;if(s instanceof Array)for(s="",n=r.length;++a<n;)o={iter:new this._iter(a,n)},s+=i?Mark.up(i,r[a],o):r[a];else s instanceof Object&&(s=Mark.up(i,r));return s},_test:function(t,e,i,n){var o=Mark.up(e,i,n).split(/\{\{\s*else\s*\}\}/);return(t===!1?o[1]:o[0])||""},_bridge:function(t,e){"."==e&&(e="\\.");var i,n,o="{{\\s*"+e+"([^/}]+\\w*)?}}|{{/"+e+"\\s*}}",s=new RegExp(o,"g"),r=t.match(s)||[],a=0,l=0,c=-1,h=0;for(n=0;n<r.length&&(i=n,c=t.indexOf(r[i],c+1),r[i].indexOf("{{/")>-1?l++:a++,a!==l);n++);return a=t.indexOf(r[0]),l=a+r[0].length,h=c+r[i].length,[t.substring(a,h),t.substring(l,c)]}};Mark.up=function(t,e,i){e=e||{},i=i||{};var n,o,s,r,a,l,c,h,p,u,f=/\{\{(.+?)\}\}/g,d=t.match(f)||[],g=[],v=0,m=0;for(i.pipes&&this._copy(i.pipes,this.pipes),i.includes&&this._copy(i.includes,this.includes),i.globals&&this._copy(i.globals,this.globals),i.delimiter&&(this.delimiter=i.delimiter),void 0!==i.compact&&(this.compact=i.compact);n=d[v++];)if(c=void 0,l="",r=n.indexOf("/}}")>-1,o=n.substr(2,n.length-(r?5:4)),o=o.replace(/`(.+?)`/g,function(t,i){return Mark.up("{{"+i+"}}",e)}),a=0===o.trim().indexOf("if "),g=o.split("|"),g.shift(),o=o.replace(/^\s*if/,"").split("|").shift().trim(),s=a?"if":o.split("|")[0],u=e[o],a&&!g.length&&(g=["notempty"]),!r&&t.indexOf("{{/"+s)>-1&&(c=this._bridge(t,s),n=c[0],l=c[1],v+=n.match(f).length-1),!/^\{\{\s*else\s*\}\}$/.test(n)){if(void 0!==(h=this.globals[o]))c=this._eval(h,g,l);else if(p=this.includes[o])p instanceof Function&&(p=p()),c=this._pipe(Mark.up(p,e,i),g);else if(o.indexOf("#")>-1)i.iter.sign=o,c=this._pipe(i.iter,g);else if("."===o)c=this._pipe(e,g);else if(o.indexOf(".")>-1){for(o=o.split("."),u=Mark.globals[o[0]],u?m=1:(m=0,u=e);u&&m<o.length;)u=u[o[m++]];c=this._eval(u,g,l)}else a?c=this._pipe(u,g):u instanceof Array?c=this._eval(u,g,l):l?c=u?Mark.up(l,u):void 0:e.hasOwnProperty(o)&&(c=this._pipe(u,g));c instanceof Array&&(c=this._eval(c,g,l)),a&&(c=this._test(c,l,e,i)),t=t.replace(n,void 0===c?"???":c)}return this.compact?t.replace(/>\s+</g,"><"):t},Mark.pipes={empty:function(t){return t&&0!==(t+"").trim().length?!1:t},notempty:function(t){return t&&(t+"").trim().length?t:!1},blank:function(t,e){return t||0===t?t:e},more:function(t,e){return Mark._size(t)>e?t:!1},less:function(t,e){return Mark._size(t)<e?t:!1},ormore:function(t,e){return Mark._size(t)>=e?t:!1},orless:function(t,e){return Mark._size(t)<=e?t:!1},between:function(t,e,i){return t=Mark._size(t),t>=e&&i>=t?t:!1},equals:function(t,e){return t==e?t:!1},notequals:function(t,e){return t!=e?t:!1},like:function(t,e){return new RegExp(e,"i").test(t)?t:!1},notlike:function(t,e){return Mark.pipes.like(t,e)?!1:t},upcase:function(t){return String(t).toUpperCase()},downcase:function(t){return String(t).toLowerCase()},capcase:function(t){return t.replace(/(?:^|\s)\S/g,function(t){return t.toUpperCase()})},chop:function(t,e){return t.length>e?t.substr(0,e)+"...":t},tease:function(t,e){var i=t.split(/\s+/);return i.slice(0,e).join(" ")+(i.length>e?"...":"")},trim:function(t){return t.trim()},pack:function(t){return t.trim().replace(/\s{2,}/g," ")},round:function(t){return Math.round(+t)},clean:function(t){return String(t).replace(/<\/?[^>]+>/gi,"")},size:function(t){return t.length},length:function(t){return t.length},reverse:function(t){return[].concat(t).reverse()},join:function(t,e){return t.join(e)},limit:function(t,e,i){return t.slice(+i||0,+e+(+i||0))},split:function(t,e){return t.split(e||",")},choose:function(t,e,i){return t?e:i||""},toggle:function(t,e,i,n){return i.split(",")[e.match(/\w+/g).indexOf(t+"")]||n},sort:function(t,e){var i=function(t,i){return t[e]>i[e]?1:-1};return[].concat(t).sort(e?i:void 0)},fix:function(t,e){return(+t).toFixed(e)},mod:function(t,e){return+t%+e},divisible:function(t,e){return t&&+t%e===0?t:!1},even:function(t){return t&&0===(1&+t)?t:!1},odd:function(t){return t&&1===(1&+t)?t:!1},number:function(t){return parseFloat(t.replace(/[^\-\d\.]/g,""))},url:function(t){return encodeURI(t)},bool:function(t){return!!t},falsy:function(t){return!t},first:function(t){return 0===t.idx},last:function(t){return t.idx===t.size-1},call:function(t,e){return t[e].apply(t,[].slice.call(arguments,2))},set:function(t,e){return Mark.globals[e]=t,""},log:function(t){return console.log(t),t}},"function"!=typeof String.prototype.trim&&(String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g,"")}),"undefined"!=typeof module&&module.exports?module.exports=Mark:"function"==typeof define&&define.amd&&define(function(){return Mark});var guiaTV=function(t){"use strict";function e(){var e,i=t.Deferred();return setTimeout(function(){e=["telecinco","antena3","la2","la1","cuatro","lasexta","historia"],v=[2,4,5,7],i.resolve(e)},3e3),i.promise()}function i(e){{var i=[],n=[];e.length}return t.when.apply(null,t.map(e,function(e,o){var s="datos/"+e+".json";n.push(t.get(s).done(function(t){m[o]=i[o]=t}).fail(function(){m[o]=i[o]=""}))})),t.when.apply(null,n).promise()}function n(e,i){var n=e||d,s=i||m,r={},a='<div id="{{idcanal}}" class="lineaCanal clearfix"></div>';t.each(n,function(t,e){r.idcanal=e;var i=Mark.up(a,r);P.append(i)}),t.each(s,function(e,i){var n=i.canal.nombre,s=t("#"+n);t.each(i.programas,function(t,e){var i=o(t,e);s.append(i)})})}function o(t,e){var i,n,o={},s='<div class="itemPrograma" id="{{id_programa}}" data-url="{{url_ficha}}"style="width:{{dur}}; left:{{diffHoraDia}}; user-selected:none;"><div class="itemProgramaInner {{clase}}"><a href="http://elmundo.es/television/programa/{{id_programa}}" style="display:none;">{{nombre}}</a><span class="categoria">{{categoria}}</span><h4>{{nombre}}</h4>{{if episodio}}<p>{{episodio}}</p>{{/if}}<span class="duracion">{{duracion}}</span><span class="fecha">{{infoHoraDuracion}}</span>{{if fav}}<span class="favorito"><i class="fa fa-bookmark"></i></span>{{/if}}{{if ale}}<span class="alerta"><i class="fa fa-clock-o"></i></span>{{/if}}</div></div>"',r=e.categoria;switch(r){case"1":n="catSeries",i="series";break;case"104":n="catCine",i="cine";break;case"31":n="catMagazines",i="magazines";break;case"20":n="catInformativos",i="informativos";break;case"90":n="catDeportes",i="deportes";break;case"INT_2":n="catConcursos",i="concursos";break;case"INT_1":n="catCorazon",i="corazón"}var a=e.duracion+" mins.",l=Math.floor(S*e.duracion),c=new Date(e.hora_inicio),h=new Date(e.hora_fin),p=Math.floor(c-C);p=Math.floor(p/1e3/60*S);var u=c.getHours();u=leftPad(u,2);var f=c.getMinutes();f=leftPad(f,2);var d=h.getHours();d=leftPad(d,2);var g=h.getMinutes();g=leftPad(g,2);var v=""+u+":"+f+" - "+d+":"+g;if(100*Math.random()<5)var m=!0;if(100*Math.random()<5)var b=!0;o={clase:n,dur:l+"px",diffHoraDia:p+"px",id_programa:e.id_programa,url_ficha:e.url_ficha,infoHoraDuracion:v,duracion:a,categoria:i.toUpperCase(),nombre:e.nombre,episodio:e.episodio,fav:void 0|m,ale:void 0|b};var y=Mark.up(s,o);return y}function s(e){var i=e||d,n={},o='<div class="itemCanal"><img src="http://estaticos.elmundo.es{{icono}}" /></div>';t.each(i,function(t){n.icono=m[t].canal.icono;var e=Mark.up(o,n);k.append(e)})}function r(){var e,i,n=new Date;for(i=0;3>=i;i++){n.setTime(C.getTime()+864e5*i);var o=n.toLocaleDateString("es-ES",{weekday:"long",month:"long",day:"numeric"}),s=i*x*24,r=t("<div/>").text(o).addClass("itemDia").css({left:s});for(_.append(r),b.push([o,s]),e=0;24>e;e++){var a=e+":00",l=i*x*24+e*x,c=t("<div/>").text(a).addClass("itemHoras").css({left:l});_.append(c)}}}function a(){var t={},e='<li class="itemDia" data-px="{{px}}"><a href="javascript://">{{diaText}}</a></li>';b.forEach(function(i){var n=i[0],o=i[1];t={diaText:n,px:o};var s=Mark.up(e,t);D.find("ul").append(s)})}function l(){var e=T.h,i=T.m,n=t(".horaActual").hide().find("p").text(e+":"+i).end().show(),o=parseInt(e)*x+parseInt(i)*S;n.css({left:o})}function c(){var t=w.width()/2,e=parseInt($.css("left"));e=parseInt(t-e),P.stop().animate({left:e+"px"},300),_.stop().animate({left:e+"px"},300);var i=parseInt(T.h)*x,n=parseInt(T.m)*S,o=i+n+e;$.stop().animate({left:o+"px"},300)}function h(){function e(t){console.log(this),t.preventDefault(),this.startTop=this.offsetTop,this.startLeft=this.offsetLeft,this.initialMouseX=t.clientX,this.initialMouseY=t.clientY,g=!0,m=!1,P.on("mouseup touchend",i),P.on("mousemove touchmove",n)}function i(){g&&(g=!1,P.off("mouseup touchend",i),P.off("mousemove touchmove",n))}function n(e){if(g){var i=e.clientX-this.initialMouseX,n=e.clientY-this.initialMouseY;m=Math.abs(i)>2||Math.abs(n)>2;var o=this.startTop+n,s=this.startLeft+i;o>y&&(o=y),p-f>o&&(o=p-f),s>d+Math.abs(I)+50&&(s=d+Math.abs(I)+50),s<u-50-Math.abs(E)&&(s=u-50-Math.abs(E)),t(this).css({top:o+"px",left:s+"px"}),k.css({top:o+"px"}),_.css({left:s+"px"});var r=parseInt(T.h)*x,a=parseInt(T.m)*S,l=r+a+s;$.css({left:l+"px"})}}function o(){var e=parseInt(t(this).css("left"));e=parseInt(u/2-e),h(e)}function s(){var e=-1*parseInt(t(this).data("px"));h(e)}function r(e){if(!m){g=!1;var i=document.elementFromPoint(e.clientX,e.clientY),n=t(i).is(".itemPrograma")?t(i):t(i).closest(".itemPrograma"),o=n.find("a").attr("href"),s=n.attr("id");a(s,o);var r=parseInt(n.css("left"))+n.width()/2;r=parseInt(u/2-r),h(r)}}function a(e){function i(){t("<div/>").text("X").addClass("cierra").appendTo(O).on("click",function(t){t.preventDefault(),n(),this.remove()})}function n(){0===parseInt(O.css("right"))&&O.stop().animate({right:-300},300,"swing")}n(),t.ajax({url:"fichaPrograma.html",data:{progId:e},dataType:"html",cache:!1}).done(function(t){O.find(".contenido").html(t),O.find(".nano").nanoScroller({scroll:"top"}),O.animate({right:0},500,"swing",i)})}function l(e){var i=t(e.currentTarget).attr("class").split(" ")[0];console.log(i),P.hasClass(i)?(P.removeClass(i),t(this).removeClass("activo")):(P.addClass(i),t(this).addClass("activo"))}function c(){v.length>=1&&t.each(v,function(t,e){M.find("li:nth-child("+e+")").trigger("click")})}function h(t){var e=t||0;P.stop().animate({left:e+"px"},300),_.stop().animate({left:e+"px"},300);var i=parseInt(T.h)*x,n=parseInt(T.m)*S,o=i+n+e;$.stop().animate({left:o+"px"},300)}var p=w.height(),u=w.width(),f=P.height(),d=(P.offsetWidth,k.width()),g=!1,m=!1,b=t(".contProgramas > div > div:first-child"),C=[];t.each(b,function(){C.push(this.offsetLeft)});var I=C.min(),H=t(".contProgramas > div > div:last-child"),A=[];t.each(H,function(){A.push(this.offsetLeft+t(this).width())});var E=A.max();w.find(".preload-wrapper").remove(),P.on("mousedown touchstart",e),P.on("click",r),_.on("click",".itemHoras",o),M.on("click","li",l),c(),D.on("click","li",s)}function p(){var e=t("<ul>"),i="datos/listadocanales.json";t.get(i).done(function(i){g=i;var n={},o='<li class="itemLetra"><h4>{{letra}}</h4><div class="divLetra nano"><div class="nano-content"><ul>{{canales}}<li class="itemCanal" data-idcanal="{{id_programa}}"><img src="{{icono}}" />{{nombre_completo}}<span class="check"></span></li>{{/canales}}</ul></div></div></li>';t.each(g,function(t,i){n={letra:t,canales:i};var s=Mark.up(o,n);e.append(s)}),I.html(e),t.each(I.find(".itemCanal"),function(){-1!=d.indexOf(t(this).data("idcanal"))&&t(this).find(".check").addClass("sel")}),I.find(".nano").nanoScroller({scroll:"top",flash:!0,preventPageScrolling:!0})})}function u(){var e=t('<ul class="orden vertical">'),i={},n='<li class="itemCanal" data-idcanal="{{nombre}}"><img src="http://estaticos.elmundo.es{{icono}}" />{{nombre_completo}}<span class="check sel"></span></li>';t.each(m,function(t,o){i=o.canal;
var s=Mark.up(n,i);e.append(s)}),H.find(".nano-content").html(e),H.find(".nano").nanoScroller({scroll:"top",flash:!0,preventPageScrolling:!0})}function f(){function e(){var e=t(this).find(".check"),i=e.hasClass("sel"),n=t(this).data("idcanal"),o=H.find(".itemCanal").filter(function(){return t(this).data("idcanal")===n});i?(e.toggleClass("sel"),o.find(".check").toggleClass("sel")):(e.toggleClass("sel"),o.length?o.find(".check").toggleClass("sel"):t(this).clone().appendTo(H.find("ul"))),H.find(".nano").nanoScroller().nanoScroller({scroll:"bottom"})}function i(e){e.stopPropagation();var i=t(this).parent(".itemCanal").data("idcanal"),n=I.find(".itemCanal").filter(function(){return t(this).data("idcanal")===i});t(this).toggleClass("sel"),n.find(".check").toggleClass("sel")}I.on("click",".itemCanal",e);var n,o=t(".ordenCanales ul.orden").sortable({group:"orden",pullPlaceholder:!0,onDrop:function(e,i,n){var s=o.sortable("serialize").get(),r=(JSON.stringify(s,null," "),t("<li/>").css({height:0}));e.before(r),r.detach(),n(e,i)},onDragStart:function(e,i,o){var s=e.offset(),r=i.rootGroup.pointer,a=t(".ordenCanales .nano .nano-content").get(0).scrollTop;a=Math.floor(a),n={left:r.left-s.left,top:r.top-s.top-a},o(e,i)},onDrag:function(t,e){t.css({left:e.left-n.left,top:e.top-n.top})}});H.on("click",".check",i)}var d=["la1","la2","antena3","cuatro","telecinco","lasexta"],g={},v=[],m=[],b=[],y=35,x=260,S=x/60,C=new Date,T={h:leftPad(C.getHours(),2),m:leftPad(C.getMinutes(),2)};C.setTime(Date.parse("Mon, Jul 14 2014"));var w=t(".viewPort"),M=t(".selectorCategorias"),D=t(".selectorDias"),P=t(".contProgramas"),k=t(".contCanales"),_=t(".barraHoras"),$=t(".horaActual"),O=t(".fichaPrograma"),I=(t(".barrasCanales"),t(".barraLetras")),H=t(".ordenCanales");return function(){{var t=e();t.then(function(t){return d=t,i(d)}).done(function(){s(d),n(d,m),r(),l(),a(),c(),h(),p(),u(),f()})}}(),t.fn.exists=function(){return this.length>0},this}(jq111);Array.prototype.max=function(){for(var t=this[0],e=this.length,i=1;e>i;i++)this[i]>t&&(t=this[i]);return t},Array.prototype.min=function(){for(var t=this[0],e=this.length,i=1;e>i;i++)this[i]<t&&(t=this[i]);return t};
//# sourceMappingURL=data:application/json;base64,