function createCookie(t,e,i){var n;if(i){var r=new Date;r.setTime(r.getTime()+24*i*60*60*1e3),n="; expires="+r.toGMTString()}else n="";document.cookie=escape(t)+"="+escape(e)+n+"; path=/"}function readCookie(t){for(var e=escape(t)+"=",i=document.cookie.split(";"),n=0;n<i.length;n++){for(var r=i[n];" "===r.charAt(0);)r=r.substring(1,r.length);if(0===r.indexOf(e))return unescape(r.substring(e.length,r.length))}return null}function eraseCookie(t){createCookie(t,"",-1)}function leftPad(t,e){for(var i=t+"";i.length<e;)i="0"+i;return i}!function(t,e,i,n){function r(t,e){var i=Math.max(0,t[0]-e[0],e[0]-t[1]),n=Math.max(0,t[2]-e[1],e[1]-t[3]);return i+n}function o(e,i,n,r){var o=e.length,s=r?"offset":"position";for(n=n||0;o--;){var a=e[o].el?e[o].el:t(e[o]),l=a[s]();l.left+=parseInt(a.css("margin-left"),10),l.top+=parseInt(a.css("margin-top"),10),i[o]=[l.left-n,l.left+a.outerWidth()+n,l.top-n,l.top+a.outerHeight()+n]}}function s(t,e){var i=e.offset();return{left:t.left-i.left,top:t.top-i.top}}function a(t,e,i){e=[e.left,e.top],i=i&&[i.left,i.top];for(var n,o=t.length,s=[];o--;)n=t[o],s[o]=[o,r(n,e),i&&r(n,i)];return s=s.sort(function(t,e){return e[1]-t[1]||e[2]-t[2]||e[0]-t[0]})}function l(e){this.options=t.extend({},p,e),this.containers=[],this.options.rootGroup||(this.scrollProxy=t.proxy(this.scroll,this),this.dragProxy=t.proxy(this.drag,this),this.dropProxy=t.proxy(this.drop,this),this.placeholder=t(this.options.placeholder),e.isValidTarget||(this.options.isValidTarget=n))}function c(e,i){this.el=e,this.options=t.extend({},u,i),this.group=l.get(this.options),this.rootGroup=this.options.rootGroup||this.group,this.handle=this.rootGroup.options.handle||this.rootGroup.options.itemSelector;var n=this.rootGroup.options.itemPath;this.target=n?this.el.find(n):this.el,this.target.on(h.start,this.handle,t.proxy(this.dragInit,this)),this.options.drop&&this.group.containers.push(this)}var h,u={drag:!0,drop:!0,exclude:"",nested:!0,vertical:!0},p={afterMove:function(){},containerPath:"",containerSelector:"ol, ul",distance:0,delay:0,handle:"",itemPath:"",itemSelector:"li",bodyClass:"dragging",draggedClass:"dragged",placeholderClass:"placeholder",isValidTarget:function(){return!0},onCancel:function(){},onDrag:function(t,e){t.css(e)},onDragStart:function(e,i){e.css({height:e.height(),width:e.width()}),e.addClass(i.group.options.draggedClass),t("body").addClass(i.group.options.bodyClass)},onDrop:function(e,i){e.removeClass(i.group.options.draggedClass).removeAttr("style"),t("body").removeClass(i.group.options.bodyClass)},onMousedown:function(t,e,i){return i.target.nodeName.match(/^(input|select|textarea)$/i)?void 0:(i.preventDefault(),!0)},placeholder:'<li class="placeholder"/>',pullPlaceholder:!0,serialize:function(e,i,n){var r=t.extend({},e.data());return n?[i]:(i[0]&&(r.children=i),delete r.subContainers,delete r.sortable,r)},tolerance:0},f={},d=0,g={left:0,top:0,bottom:0,right:0},h={start:"touchstart.sortable mousedown.sortable",drop:"touchend.sortable touchcancel.sortable mouseup.sortable",drag:"touchmove.sortable mousemove.sortable",scroll:"scroll.sortable"},v="subContainers";l.get=function(t){return f[t.group]||(t.group===n&&(t.group=d++),f[t.group]=new l(t)),f[t.group]},l.prototype={dragInit:function(e,i){this.$document=t(i.el[0].ownerDocument),this.item=t(e.target).closest(this.options.itemSelector),this.itemContainer=i,!this.item.is(this.options.exclude)&&this.options.onMousedown(this.item,p.onMousedown,e)&&(this.setPointer(e),this.toggleListeners("on"),this.setupDelayTimer(),this.dragInitDone=!0)},drag:function(t){if(!this.dragging){if(!this.distanceMet(t)||!this.delayMet)return;this.options.onDragStart(this.item,this.itemContainer,p.onDragStart,t),this.item.before(this.placeholder),this.dragging=!0}this.setPointer(t),this.options.onDrag(this.item,s(this.pointer,this.item.offsetParent()),p.onDrag,t);var e=t.pageX||t.originalEvent.pageX,i=t.pageY||t.originalEvent.pageY,r=this.sameResultBox,o=this.options.tolerance;(!r||r.top-o>i||r.bottom+o<i||r.left-o>e||r.right+o<e)&&(this.searchValidTarget()||(this.placeholder.detach(),this.lastAppendedItem=n))},drop:function(t){this.toggleListeners("off"),this.dragInitDone=!1,this.dragging&&(this.placeholder.closest("html")[0]?this.placeholder.before(this.item).detach():this.options.onCancel(this.item,this.itemContainer,p.onCancel,t),this.options.onDrop(this.item,this.getContainer(this.item),p.onDrop,t),this.clearDimensions(),this.clearOffsetParent(),this.lastAppendedItem=this.sameResultBox=n,this.dragging=!1)},searchValidTarget:function(t,e){t||(t=this.relativePointer||this.pointer,e=this.lastRelativePointer||this.lastPointer);for(var i=a(this.getContainerDimensions(),t,e),r=i.length;r--;){var o=i[r][0],l=i[r][1];if(!l||this.options.pullPlaceholder){var c=this.containers[o];if(!c.disabled){if(!this.$getOffsetParent()){var h=c.getItemOffsetParent();t=s(t,h),e=s(e,h)}if(c.searchValidTarget(t,e))return!0}}}this.sameResultBox&&(this.sameResultBox=n)},movePlaceholder:function(t,e,i,n){var r=this.lastAppendedItem;(n||!r||r[0]!==e[0])&&(e[i](this.placeholder),this.lastAppendedItem=e,this.sameResultBox=n,this.options.afterMove(this.placeholder,t,e))},getContainerDimensions:function(){return this.containerDimensions||o(this.containers,this.containerDimensions=[],this.options.tolerance,!this.$getOffsetParent()),this.containerDimensions},getContainer:function(t){return t.closest(this.options.containerSelector).data(i)},$getOffsetParent:function(){if(this.offsetParent===n){var t=this.containers.length-1,e=this.containers[t].getItemOffsetParent();if(!this.options.rootGroup)for(;t--;)if(e[0]!=this.containers[t].getItemOffsetParent()[0]){e=!1;break}this.offsetParent=e}return this.offsetParent},setPointer:function(t){var e=this.getPointer(t);if(this.$getOffsetParent()){var i=s(e,this.$getOffsetParent());this.lastRelativePointer=this.relativePointer,this.relativePointer=i}this.lastPointer=this.pointer,this.pointer=e},distanceMet:function(t){var e=this.getPointer(t);return Math.max(Math.abs(this.pointer.left-e.left),Math.abs(this.pointer.top-e.top))>=this.options.distance},getPointer:function(t){return{left:t.pageX||t.originalEvent.pageX,top:t.pageY||t.originalEvent.pageY}},setupDelayTimer:function(){var t=this;this.delayMet=!this.options.delay,this.delayMet||(clearTimeout(this._mouseDelayTimer),this._mouseDelayTimer=setTimeout(function(){t.delayMet=!0},this.options.delay))},scroll:function(){this.clearDimensions(),this.clearOffsetParent()},toggleListeners:function(e){var i=this,n=["drag","drop","scroll"];t.each(n,function(t,n){i.$document[e](h[n],i[n+"Proxy"])})},clearOffsetParent:function(){this.offsetParent=n},clearDimensions:function(){this.traverse(function(t){t._clearDimensions()})},traverse:function(t){t(this);for(var e=this.containers.length;e--;)this.containers[e].traverse(t)},_clearDimensions:function(){this.containerDimensions=n},_destroy:function(){f[this.options.group]=n}},c.prototype={dragInit:function(t){var e=this.rootGroup;!this.disabled&&!e.dragInitDone&&this.options.drag&&this.isValidDrag(t)&&e.dragInit(t,this)},isValidDrag:function(t){return 1==t.which||"touchstart"==t.type&&1==t.originalEvent.touches.length},searchValidTarget:function(t,e){var i=a(this.getItemDimensions(),t,e),n=i.length,r=this.rootGroup,o=!r.options.isValidTarget||r.options.isValidTarget(r.item,this);if(!n&&o)return r.movePlaceholder(this,this.target,"append"),!0;for(;n--;){var s=i[n][0],l=i[n][1];if(!l&&this.hasChildGroup(s)){var c=this.getContainerGroup(s).searchValidTarget(t,e);if(c)return!0}else if(o)return this.movePlaceholder(s,t),!0}},movePlaceholder:function(e,i){var n=t(this.items[e]),r=this.itemDimensions[e],o="after",s=n.outerWidth(),a=n.outerHeight(),l=n.offset(),c={left:l.left,right:l.left+s,top:l.top,bottom:l.top+a};if(this.options.vertical){var h=(r[2]+r[3])/2,u=i.top<=h;u?(o="before",c.bottom-=a/2):c.top+=a/2}else{var p=(r[0]+r[1])/2,f=i.left<=p;f?(o="before",c.right-=s/2):c.left+=s/2}this.hasChildGroup(e)&&(c=g),this.rootGroup.movePlaceholder(this,n,o,c)},getItemDimensions:function(){return this.itemDimensions||(this.items=this.$getChildren(this.el,"item").filter(":not(."+this.group.options.placeholderClass+", ."+this.group.options.draggedClass+")").get(),o(this.items,this.itemDimensions=[],this.options.tolerance)),this.itemDimensions},getItemOffsetParent:function(){var t,e=this.el;return t="relative"===e.css("position")||"absolute"===e.css("position")||"fixed"===e.css("position")?e:e.offsetParent()},hasChildGroup:function(t){return this.options.nested&&this.getContainerGroup(t)},getContainerGroup:function(e){var r=t.data(this.items[e],v);if(r===n){var o=this.$getChildren(this.items[e],"container");if(r=!1,o[0]){var s=t.extend({},this.options,{rootGroup:this.rootGroup,group:d++});r=o[i](s).data(i).group}t.data(this.items[e],v,r)}return r},$getChildren:function(e,i){var n=this.rootGroup.options,r=n[i+"Path"],o=n[i+"Selector"];return e=t(e),r&&(e=e.find(r)),e.children(o)},_serialize:function(e,i){var n=this,r=i?"item":"container",o=this.$getChildren(e,r).not(this.options.exclude).map(function(){return n._serialize(t(this),!i)}).get();return this.rootGroup.options.serialize(e,o,i)},traverse:function(e){t.each(this.items||[],function(){var i=t.data(this,v);i&&i.traverse(e)}),e(this)},_clearDimensions:function(){this.itemDimensions=n},_destroy:function(){var e=this;this.target.off(h.start,this.handle),this.el.removeData(i),this.options.drop&&(this.group.containers=t.grep(this.group.containers,function(t){return t!=e})),t.each(this.items||[],function(){t.removeData(this,v)})}};var m={enable:function(){this.traverse(function(t){t.disabled=!1})},disable:function(){this.traverse(function(t){t.disabled=!0})},serialize:function(){return this._serialize(this.el,!0)},refresh:function(){this.traverse(function(t){t._clearDimensions()})},destroy:function(){this.traverse(function(t){t._destroy()})}};t.extend(c.prototype,m),t.fn[i]=function(e){var r=Array.prototype.slice.call(arguments,1);return this.map(function(){var o=t(this),s=o.data(i);return s&&m[e]?m[e].apply(s,r)||this:(s||e!==n&&"object"!=typeof e||o.data(i,new c(o,e)),this)})}}(jq111,window,"sortable"),function(t,e,i){"use strict";var n,r,o,s,a,l,c,h,u,p,f,d,g,v,m,b,w,T,S,y,x,C,M,P,D,k,O,E,I,_,$;M={paneClass:"nano-pane",sliderClass:"nano-slider",contentClass:"nano-content",iOSNativeScrolling:!1,preventPageScrolling:!1,disableResize:!1,alwaysVisible:!1,flashDelay:1500,sliderMinHeight:20,sliderMaxHeight:null,documentContext:null,windowContext:null},T="scrollbar",w="scroll",u="mousedown",p="mouseenter",f="mousemove",g="mousewheel",d="mouseup",b="resize",a="drag",l="enter",y="up",m="panedown",o="DOMMouseScroll",s="down",x="wheel",c="keydown",h="keyup",S="touchmove",n="Microsoft Internet Explorer"===e.navigator.appName&&/msie 7./i.test(e.navigator.appVersion)&&e.ActiveXObject,r=null,O=e.requestAnimationFrame,C=e.cancelAnimationFrame,I=i.createElement("div").style,$=function(){var t,e,i,n,r,o;for(n=["t","webkitT","MozT","msT","OT"],t=r=0,o=n.length;o>r;t=++r)if(i=n[t],e=n[t]+"ransform",e in I)return n[t].substr(0,n[t].length-1);return!1}(),_=function(t){return $===!1?!1:""===$?t:$+t.charAt(0).toUpperCase()+t.substr(1)},E=_("transform"),D=E!==!1,P=function(){var t,e,n;return t=i.createElement("div"),e=t.style,e.position="absolute",e.width="100px",e.height="100px",e.overflow=w,e.top="-9999px",i.body.appendChild(t),n=t.offsetWidth-t.clientWidth,i.body.removeChild(t),n},k=function(){var t,i,n;return i=e.navigator.userAgent,(t=/(?=.+Mac OS X)(?=.+Firefox)/.test(i))?(n=/Firefox\/\d{2}\./.exec(i),n&&(n=n[0].replace(/\D+/g,"")),t&&+n>23):!1},v=function(){function c(n,o){this.el=n,this.options=o,r||(r=P()),this.$el=t(this.el),this.doc=t(this.options.documentContext||i),this.win=t(this.options.windowContext||e),this.body=this.doc.find("body"),this.$content=this.$el.children("."+o.contentClass),this.$content.attr("tabindex",this.options.tabIndex||0),this.content=this.$content[0],this.previousPosition=0,this.options.iOSNativeScrolling&&null!=this.el.style.WebkitOverflowScrolling?this.nativeScrolling():this.generate(),this.createEvents(),this.addEvents(),this.reset()}return c.prototype.preventScrolling=function(t,e){if(this.isActive)if(t.type===o)(e===s&&t.originalEvent.detail>0||e===y&&t.originalEvent.detail<0)&&t.preventDefault();else if(t.type===g){if(!t.originalEvent||!t.originalEvent.wheelDelta)return;(e===s&&t.originalEvent.wheelDelta<0||e===y&&t.originalEvent.wheelDelta>0)&&t.preventDefault()}},c.prototype.nativeScrolling=function(){this.$content.css({WebkitOverflowScrolling:"touch"}),this.iOSNativeScrolling=!0,this.isActive=!0},c.prototype.updateScrollValues=function(){var t,e;t=this.content,this.maxScrollTop=t.scrollHeight-t.clientHeight,this.prevScrollTop=this.contentScrollTop||0,this.contentScrollTop=t.scrollTop,e=this.contentScrollTop>this.previousPosition?"down":this.contentScrollTop<this.previousPosition?"up":"same",this.previousPosition=this.contentScrollTop,"same"!==e&&this.$el.trigger("update",{position:this.contentScrollTop,maximum:this.maxScrollTop,direction:e}),this.iOSNativeScrolling||(this.maxSliderTop=this.paneHeight-this.sliderHeight,this.sliderTop=0===this.maxScrollTop?0:this.contentScrollTop*this.maxSliderTop/this.maxScrollTop)},c.prototype.setOnScrollStyles=function(){var t;D?(t={},t[E]="translate(0, "+this.sliderTop+"px)"):t={top:this.sliderTop},O?(C&&this.scrollRAF&&C(this.scrollRAF),this.scrollRAF=O(function(e){return function(){return e.scrollRAF=null,e.slider.css(t)}}(this))):this.slider.css(t)},c.prototype.createEvents=function(){this.events={down:function(t){return function(e){return t.isBeingDragged=!0,t.offsetY=e.pageY-t.slider.offset().top,t.slider.is(e.target)||(t.offsetY=0),t.pane.addClass("active"),t.doc.bind(f,t.events[a]).bind(d,t.events[y]),t.body.bind(p,t.events[l]),!1}}(this),drag:function(t){return function(e){return t.sliderY=e.pageY-t.$el.offset().top-t.paneTop-(t.offsetY||.5*t.sliderHeight),t.scroll(),t.contentScrollTop>=t.maxScrollTop&&t.prevScrollTop!==t.maxScrollTop?t.$el.trigger("scrollend"):0===t.contentScrollTop&&0!==t.prevScrollTop&&t.$el.trigger("scrolltop"),!1}}(this),up:function(t){return function(){return t.isBeingDragged=!1,t.pane.removeClass("active"),t.doc.unbind(f,t.events[a]).unbind(d,t.events[y]),t.body.unbind(p,t.events[l]),!1}}(this),resize:function(t){return function(){t.reset()}}(this),panedown:function(t){return function(e){return t.sliderY=(e.offsetY||e.originalEvent.layerY)-.5*t.sliderHeight,t.scroll(),t.events.down(e),!1}}(this),scroll:function(t){return function(e){t.updateScrollValues(),t.isBeingDragged||(t.iOSNativeScrolling||(t.sliderY=t.sliderTop,t.setOnScrollStyles()),null!=e&&(t.contentScrollTop>=t.maxScrollTop?(t.options.preventPageScrolling&&t.preventScrolling(e,s),t.prevScrollTop!==t.maxScrollTop&&t.$el.trigger("scrollend")):0===t.contentScrollTop&&(t.options.preventPageScrolling&&t.preventScrolling(e,y),0!==t.prevScrollTop&&t.$el.trigger("scrolltop"))))}}(this),wheel:function(t){return function(e){var i;if(null!=e)return i=e.delta||e.wheelDelta||e.originalEvent&&e.originalEvent.wheelDelta||-e.detail||e.originalEvent&&-e.originalEvent.detail,i&&(t.sliderY+=-i/3),t.scroll(),!1}}(this),enter:function(t){return function(e){var i;if(t.isBeingDragged)return 1!==(e.buttons||e.which)?(i=t.events)[y].apply(i,arguments):void 0}}(this)}},c.prototype.addEvents=function(){var t;this.removeEvents(),t=this.events,this.options.disableResize||this.win.bind(b,t[b]),this.iOSNativeScrolling||(this.slider.bind(u,t[s]),this.pane.bind(u,t[m]).bind(""+g+" "+o,t[x])),this.$content.bind(""+w+" "+g+" "+o+" "+S,t[w])},c.prototype.removeEvents=function(){var t;t=this.events,this.win.unbind(b,t[b]),this.iOSNativeScrolling||(this.slider.unbind(),this.pane.unbind()),this.$content.unbind(""+w+" "+g+" "+o+" "+S,t[w])},c.prototype.generate=function(){var t,i,n,o,s,a,l;return o=this.options,a=o.paneClass,l=o.sliderClass,t=o.contentClass,(s=this.$el.children("."+a)).length||s.children("."+l).length||this.$el.append('<div class="'+a+'"><div class="'+l+'" /></div>'),this.pane=this.$el.children("."+a),this.slider=this.pane.find("."+l),0===r&&k()?(n=e.getComputedStyle(this.content,null).getPropertyValue("padding-right").replace(/[^0-9.]+/g,""),i={right:-14,paddingRight:+n+14}):r&&(i={right:-r},this.$el.addClass("has-scrollbar")),null!=i&&this.$content.css(i),this},c.prototype.restore=function(){this.stopped=!1,this.iOSNativeScrolling||this.pane.show(),this.addEvents()},c.prototype.reset=function(){var t,e,i,o,s,a,l,c,h,u,p,f;return this.iOSNativeScrolling?(this.contentHeight=this.content.scrollHeight,void 0):(this.$el.find("."+this.options.paneClass).length||this.generate().stop(),this.stopped&&this.restore(),t=this.content,o=t.style,s=o.overflowY,n&&this.$content.css({height:this.$content.height()}),e=t.scrollHeight+r,u=parseInt(this.$el.css("max-height"),10),u>0&&(this.$el.height(""),this.$el.height(t.scrollHeight>u?u:t.scrollHeight)),l=this.pane.outerHeight(!1),h=parseInt(this.pane.css("top"),10),a=parseInt(this.pane.css("bottom"),10),c=l+h+a,f=Math.round(c/e*c),f<this.options.sliderMinHeight?f=this.options.sliderMinHeight:null!=this.options.sliderMaxHeight&&f>this.options.sliderMaxHeight&&(f=this.options.sliderMaxHeight),s===w&&o.overflowX!==w&&(f+=r),this.maxSliderTop=c-f,this.contentHeight=e,this.paneHeight=l,this.paneOuterHeight=c,this.sliderHeight=f,this.paneTop=h,this.slider.height(f),this.events.scroll(),this.pane.show(),this.isActive=!0,t.scrollHeight===t.clientHeight||this.pane.outerHeight(!0)>=t.scrollHeight&&s!==w?(this.pane.hide(),this.isActive=!1):this.el.clientHeight===t.scrollHeight&&s===w?this.slider.hide():this.slider.show(),this.pane.css({opacity:this.options.alwaysVisible?1:"",visibility:this.options.alwaysVisible?"visible":""}),i=this.$content.css("position"),("static"===i||"relative"===i)&&(p=parseInt(this.$content.css("right"),10),p&&this.$content.css({right:"",marginRight:p})),this)},c.prototype.scroll=function(){return this.isActive?(this.sliderY=Math.max(0,this.sliderY),this.sliderY=Math.min(this.maxSliderTop,this.sliderY),this.$content.scrollTop(this.maxScrollTop*this.sliderY/this.maxSliderTop),this.iOSNativeScrolling||(this.updateScrollValues(),this.setOnScrollStyles()),this):void 0},c.prototype.scrollBottom=function(t){return this.isActive?(this.$content.scrollTop(this.contentHeight-this.$content.height()-t).trigger(g),this.stop().restore(),this):void 0},c.prototype.scrollTop=function(t){return this.isActive?(this.$content.scrollTop(+t).trigger(g),this.stop().restore(),this):void 0},c.prototype.scrollTo=function(t){return this.isActive?(this.scrollTop(this.$el.find(t).get(0).offsetTop),this):void 0},c.prototype.stop=function(){return C&&this.scrollRAF&&(C(this.scrollRAF),this.scrollRAF=null),this.stopped=!0,this.removeEvents(),this.iOSNativeScrolling||this.pane.hide(),this},c.prototype.destroy=function(){return this.stopped||this.stop(),!this.iOSNativeScrolling&&this.pane.length&&this.pane.remove(),n&&this.$content.height(""),this.$content.removeAttr("tabindex"),this.$el.hasClass("has-scrollbar")&&(this.$el.removeClass("has-scrollbar"),this.$content.css({right:""})),this},c.prototype.flash=function(){return!this.iOSNativeScrolling&&this.isActive?(this.reset(),this.pane.addClass("flashed"),setTimeout(function(t){return function(){t.pane.removeClass("flashed")}}(this),this.options.flashDelay),this):void 0},c}(),t.fn.nanoScroller=function(e){return this.each(function(){var i,n;if((n=this.nanoscroller)||(i=t.extend({},M,e),this.nanoscroller=n=new v(this,i)),e&&"object"==typeof e){if(t.extend(n.options,e),null!=e.scrollBottom)return n.scrollBottom(e.scrollBottom);if(null!=e.scrollTop)return n.scrollTop(e.scrollTop);if(e.scrollTo)return n.scrollTo(e.scrollTo);if("bottom"===e.scroll)return n.scrollBottom(0);if("top"===e.scroll)return n.scrollTop(0);if(e.scroll&&e.scroll instanceof t)return n.scrollTo(e.scroll);if(e.stop)return n.stop();if(e.destroy)return n.destroy();if(e.flash)return n.flash()}return n.reset()})},t.fn.nanoScroller.Constructor=v}(jq111,window,document),function(t){"function"==typeof define&&define.amd&&define.amd.jq111?define(["jquery"],t):t(jq111)}(function(t){"use strict";function e(e){return!e||void 0!==e.allowPageScroll||void 0===e.swipe&&void 0===e.swipeStatus||(e.allowPageScroll=c),void 0!==e.click&&void 0===e.tap&&(e.tap=e.click),e||(e={}),e=t.extend({},t.fn.swipe.defaults,e),this.each(function(){var n=t(this),r=n.data(D);r||(r=new i(this,e),n.data(D,r))})}function i(e,i){function k(e){if(!(ce()||t(e.target).closest(i.excludedElements,Be).length>0)){var n,r=e.originalEvent?e.originalEvent:e,o=C?r.touches[0]:r;return Fe=T,C?Ue=r.touches.length:e.preventDefault(),He=0,Le=null,Ge=null,Re=0,Ne=0,Ve=0,ze=1,Ye=0,qe=de(),je=me(),ae(),!C||Ue===i.fingers||i.fingers===b||j()?(ue(0,o),Xe=Pe(),2==Ue&&(ue(1,r.touches[1]),Ne=Ve=Te(qe[0].start,qe[1].start)),(i.swipeStatus||i.pinchStatus)&&(n=H(r,Fe))):n=!1,n===!1?(Fe=x,H(r,Fe),n):(i.hold&&(ti=setTimeout(t.proxy(function(){Be.trigger("hold",[r.target]),i.hold&&(n=i.hold.call(Be,r,r.target))},this),i.longTapThreshold)),he(!0),null)}}function O(t){var e=t.originalEvent?t.originalEvent:t;if(Fe!==y&&Fe!==x&&!le()){var n,r=C?e.touches[0]:e,o=pe(r);if(We=Pe(),C&&(Ue=e.touches.length),i.hold&&clearTimeout(ti),Fe=S,2==Ue&&(0==Ne?(ue(1,e.touches[1]),Ne=Ve=Te(qe[0].start,qe[1].start)):(pe(e.touches[1]),Ve=Te(qe[0].end,qe[1].end),Ge=ye(qe[0].end,qe[1].end)),ze=Se(Ne,Ve),Ye=Math.abs(Ne-Ve)),Ue===i.fingers||i.fingers===b||!C||j()){if(Le=Me(o.start,o.end),Y(t,Le),He=xe(o.start,o.end),Re=we(),ge(Le,He),(i.swipeStatus||i.pinchStatus)&&(n=H(e,Fe)),!i.triggerOnTouchEnd||i.triggerOnTouchLeave){var s=!0;if(i.triggerOnTouchLeave){var a=De(this);s=ke(o.end,a)}!i.triggerOnTouchEnd&&s?Fe=A(S):i.triggerOnTouchLeave&&!s&&(Fe=A(y)),(Fe==x||Fe==y)&&H(e,Fe)}}else Fe=x,H(e,Fe);n===!1&&(Fe=x,H(e,Fe))}}function E(t){var e=t.originalEvent;return C&&e.touches.length>0?(se(),!0):(le()&&(Ue=Je),We=Pe(),Re=we(),N()||!R()?(Fe=x,H(e,Fe)):i.triggerOnTouchEnd||0==i.triggerOnTouchEnd&&Fe===S?(t.preventDefault(),Fe=y,H(e,Fe)):!i.triggerOnTouchEnd&&Q()?(Fe=y,L(e,Fe,f)):Fe===S&&(Fe=x,H(e,Fe)),he(!1),null)}function I(){Ue=0,We=0,Xe=0,Ne=0,Ve=0,ze=1,ae(),he(!1)}function _(t){var e=t.originalEvent;i.triggerOnTouchLeave&&(Fe=A(y),H(e,Fe))}function $(){Be.unbind(Ee,k),Be.unbind(Ae,I),Be.unbind(Ie,O),Be.unbind(_e,E),$e&&Be.unbind($e,_),he(!1)}function A(t){var e=t,n=z(),r=R(),o=N();return!n||o?e=x:!r||t!=S||i.triggerOnTouchEnd&&!i.triggerOnTouchLeave?!r&&t==y&&i.triggerOnTouchLeave&&(e=x):e=y,e}function H(t,e){var i=void 0;return q()||U()?i=L(t,e,u):(B()||j())&&i!==!1&&(i=L(t,e,p)),re()&&i!==!1?i=L(t,e,d):oe()&&i!==!1?i=L(t,e,g):ne()&&i!==!1&&(i=L(t,e,f)),e===x&&I(t),e===y&&(C?0==t.touches.length&&I(t):I(t)),i}function L(e,c,h){var v=void 0;if(h==u){if(Be.trigger("swipeStatus",[c,Le||null,He||0,Re||0,Ue,qe]),i.swipeStatus&&(v=i.swipeStatus.call(Be,e,c,Le||null,He||0,Re||0,Ue,qe),v===!1))return!1;if(c==y&&F()){if(Be.trigger("swipe",[Le,He,Re,Ue,qe]),i.swipe&&(v=i.swipe.call(Be,e,Le,He,Re,Ue,qe),v===!1))return!1;switch(Le){case n:Be.trigger("swipeLeft",[Le,He,Re,Ue,qe]),i.swipeLeft&&(v=i.swipeLeft.call(Be,e,Le,He,Re,Ue,qe));break;case r:Be.trigger("swipeRight",[Le,He,Re,Ue,qe]),i.swipeRight&&(v=i.swipeRight.call(Be,e,Le,He,Re,Ue,qe));break;case o:Be.trigger("swipeUp",[Le,He,Re,Ue,qe]),i.swipeUp&&(v=i.swipeUp.call(Be,e,Le,He,Re,Ue,qe));break;case s:Be.trigger("swipeDown",[Le,He,Re,Ue,qe]),i.swipeDown&&(v=i.swipeDown.call(Be,e,Le,He,Re,Ue,qe))}}}if(h==p){if(Be.trigger("pinchStatus",[c,Ge||null,Ye||0,Re||0,Ue,ze,qe]),i.pinchStatus&&(v=i.pinchStatus.call(Be,e,c,Ge||null,Ye||0,Re||0,Ue,ze,qe),v===!1))return!1;if(c==y&&G())switch(Ge){case a:Be.trigger("pinchIn",[Ge||null,Ye||0,Re||0,Ue,ze,qe]),i.pinchIn&&(v=i.pinchIn.call(Be,e,Ge||null,Ye||0,Re||0,Ue,ze,qe));break;case l:Be.trigger("pinchOut",[Ge||null,Ye||0,Re||0,Ue,ze,qe]),i.pinchOut&&(v=i.pinchOut.call(Be,e,Ge||null,Ye||0,Re||0,Ue,ze,qe))}}return h==f?(c===x||c===y)&&(clearTimeout(Ke),clearTimeout(ti),J()&&!te()?(Ze=Pe(),Ke=setTimeout(t.proxy(function(){Ze=null,Be.trigger("tap",[e.target]),i.tap&&(v=i.tap.call(Be,e,e.target))},this),i.doubleTapThreshold)):(Ze=null,Be.trigger("tap",[e.target]),i.tap&&(v=i.tap.call(Be,e,e.target)))):h==d?(c===x||c===y)&&(clearTimeout(Ke),Ze=null,Be.trigger("doubletap",[e.target]),i.doubleTap&&(v=i.doubleTap.call(Be,e,e.target))):h==g&&(c===x||c===y)&&(clearTimeout(Ke),Ze=null,Be.trigger("longtap",[e.target]),i.longTap&&(v=i.longTap.call(Be,e,e.target))),v}function R(){var t=!0;return null!==i.threshold&&(t=He>=i.threshold),t}function N(){var t=!1;return null!==i.cancelThreshold&&null!==Le&&(t=ve(Le)-He>=i.cancelThreshold),t}function V(){return null!==i.pinchThreshold?Ye>=i.pinchThreshold:!0}function z(){var t;return t=i.maxTimeThreshold?Re>=i.maxTimeThreshold?!1:!0:!0}function Y(t,e){if(i.allowPageScroll===c||j())t.preventDefault();else{var a=i.allowPageScroll===h;switch(e){case n:(i.swipeLeft&&a||!a&&i.allowPageScroll!=v)&&t.preventDefault();break;case r:(i.swipeRight&&a||!a&&i.allowPageScroll!=v)&&t.preventDefault();break;case o:(i.swipeUp&&a||!a&&i.allowPageScroll!=m)&&t.preventDefault();break;case s:(i.swipeDown&&a||!a&&i.allowPageScroll!=m)&&t.preventDefault()}}}function G(){var t=X(),e=W(),i=V();return t&&e&&i}function j(){return!!(i.pinchStatus||i.pinchIn||i.pinchOut)}function B(){return!(!G()||!j())}function F(){var t=z(),e=R(),i=X(),n=W(),r=N(),o=!r&&n&&i&&e&&t;return o}function U(){return!!(i.swipe||i.swipeStatus||i.swipeLeft||i.swipeRight||i.swipeUp||i.swipeDown)}function q(){return!(!F()||!U())}function X(){return Ue===i.fingers||i.fingers===b||!C}function W(){return 0!==qe[0].end.x}function Q(){return!!i.tap}function J(){return!!i.doubleTap}function Z(){return!!i.longTap}function K(){if(null==Ze)return!1;var t=Pe();return J()&&t-Ze<=i.doubleTapThreshold}function te(){return K()}function ee(){return(1===Ue||!C)&&(isNaN(He)||He<i.threshold)}function ie(){return Re>i.longTapThreshold&&w>He}function ne(){return!(!ee()||!Q())}function re(){return!(!K()||!J())}function oe(){return!(!ie()||!Z())}function se(){Qe=Pe(),Je=event.touches.length+1}function ae(){Qe=0,Je=0}function le(){var t=!1;if(Qe){var e=Pe()-Qe;e<=i.fingerReleaseThreshold&&(t=!0)}return t}function ce(){return!(Be.data(D+"_intouch")!==!0)}function he(t){t===!0?(Be.bind(Ie,O),Be.bind(_e,E),$e&&Be.bind($e,_)):(Be.unbind(Ie,O,!1),Be.unbind(_e,E,!1),$e&&Be.unbind($e,_,!1)),Be.data(D+"_intouch",t===!0)}function ue(t,e){var i=void 0!==e.identifier?e.identifier:0;return qe[t].identifier=i,qe[t].start.x=qe[t].end.x=e.pageX||e.clientX,qe[t].start.y=qe[t].end.y=e.pageY||e.clientY,qe[t]}function pe(t){var e=void 0!==t.identifier?t.identifier:0,i=fe(e);return i.end.x=t.pageX||t.clientX,i.end.y=t.pageY||t.clientY,i}function fe(t){for(var e=0;e<qe.length;e++)if(qe[e].identifier==t)return qe[e]}function de(){for(var t=[],e=0;5>=e;e++)t.push({start:{x:0,y:0},end:{x:0,y:0},identifier:0});return t}function ge(t,e){e=Math.max(e,ve(t)),je[t].distance=e}function ve(t){return je[t]?je[t].distance:void 0}function me(){var t={};return t[n]=be(n),t[r]=be(r),t[o]=be(o),t[s]=be(s),t}function be(t){return{direction:t,distance:0}}function we(){return We-Xe}function Te(t,e){var i=Math.abs(t.x-e.x),n=Math.abs(t.y-e.y);return Math.round(Math.sqrt(i*i+n*n))}function Se(t,e){var i=e/t*1;return i.toFixed(2)}function ye(){return 1>ze?l:a}function xe(t,e){return Math.round(Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)))}function Ce(t,e){var i=t.x-e.x,n=e.y-t.y,r=Math.atan2(n,i),o=Math.round(180*r/Math.PI);return 0>o&&(o=360-Math.abs(o)),o}function Me(t,e){var i=Ce(t,e);return 45>=i&&i>=0?n:360>=i&&i>=315?n:i>=135&&225>=i?r:i>45&&135>i?s:o}function Pe(){var t=new Date;return t.getTime()}function De(e){e=t(e);var i=e.offset(),n={left:i.left,right:i.left+e.outerWidth(),top:i.top,bottom:i.top+e.outerHeight()};return n}function ke(t,e){return t.x>e.left&&t.x<e.right&&t.y>e.top&&t.y<e.bottom}var Oe=C||P||!i.fallbackToMouseEvents,Ee=Oe?P?M?"MSPointerDown":"pointerdown":"touchstart":"mousedown",Ie=Oe?P?M?"MSPointerMove":"pointermove":"touchmove":"mousemove",_e=Oe?P?M?"MSPointerUp":"pointerup":"touchend":"mouseup",$e=Oe?null:"mouseleave",Ae=P?M?"MSPointerCancel":"pointercancel":"touchcancel",He=0,Le=null,Re=0,Ne=0,Ve=0,ze=1,Ye=0,Ge=0,je=null,Be=t(e),Fe="start",Ue=0,qe=null,Xe=0,We=0,Qe=0,Je=0,Ze=0,Ke=null,ti=null;try{Be.bind(Ee,k),Be.bind(Ae,I)}catch(ei){t.error("events not supported "+Ee+","+Ae+" on jQuery.swipe")}this.enable=function(){return Be.bind(Ee,k),Be.bind(Ae,I),Be},this.disable=function(){return $(),Be},this.destroy=function(){return $(),Be.data(D,null),Be},this.option=function(e,n){if(void 0!==i[e]){if(void 0===n)return i[e];i[e]=n}else t.error("Option "+e+" does not exist on jQuery.swipe.options");return null}}var n="left",r="right",o="up",s="down",a="in",l="out",c="none",h="auto",u="swipe",p="pinch",f="tap",d="doubletap",g="longtap",v="horizontal",m="vertical",b="all",w=10,T="start",S="move",y="end",x="cancel",C="ontouchstart"in window,M=window.navigator.msPointerEnabled&&!window.navigator.pointerEnabled,P=window.navigator.pointerEnabled||window.navigator.msPointerEnabled,D="TouchSwipe",k={fingers:1,threshold:75,cancelThreshold:null,pinchThreshold:20,maxTimeThreshold:null,fingerReleaseThreshold:250,longTapThreshold:500,doubleTapThreshold:200,swipe:null,swipeLeft:null,swipeRight:null,swipeUp:null,swipeDown:null,swipeStatus:null,pinchIn:null,pinchOut:null,pinchStatus:null,click:null,tap:null,doubleTap:null,longTap:null,hold:null,triggerOnTouchEnd:!0,triggerOnTouchLeave:!1,allowPageScroll:"auto",fallbackToMouseEvents:!0,excludedElements:"label, button, input, select, textarea, a, .noSwipe"};t.fn.swipe=function(i){var n=t(this),r=n.data(D);if(r&&"string"==typeof i){if(r[i])return r[i].apply(this,Array.prototype.slice.call(arguments,1));t.error("Method "+i+" does not exist on jQuery.swipe")}else if(!(r||"object"!=typeof i&&i))return e.apply(this,arguments);return n},t.fn.swipe.defaults=k,t.fn.swipe.phases={PHASE_START:T,PHASE_MOVE:S,PHASE_END:y,PHASE_CANCEL:x},t.fn.swipe.directions={LEFT:n,RIGHT:r,UP:o,DOWN:s,IN:a,OUT:l},t.fn.swipe.pageScroll={NONE:c,HORIZONTAL:v,VERTICAL:m,AUTO:h},t.fn.swipe.fingers={ONE:1,TWO:2,THREE:3,ALL:b}});var Mark={includes:{},globals:{},delimiter:">",compact:!1,_copy:function(t,e){e=e||[];for(var i in t)e[i]=t[i];return e},_size:function(t){return t instanceof Array?t.length:t||0},_iter:function(t,e){this.idx=t,this.size=e,this.length=e,this.sign="#",this.toString=function(){return this.idx+this.sign.length-1}},_pipe:function(t,e){var i,n,r,o;if(i=e.shift()){n=i.split(this.delimiter),r=n.shift().trim();try{o=Mark.pipes[r].apply(null,[t].concat(n)),t=this._pipe(o,e)}catch(s){}}return t},_eval:function(t,e,i){var n,r,o=this._pipe(t,e),s=o,a=-1;if(o instanceof Array)for(o="",n=s.length;++a<n;)r={iter:new this._iter(a,n)},o+=i?Mark.up(i,s[a],r):s[a];else o instanceof Object&&(o=Mark.up(i,s));return o},_test:function(t,e,i,n){var r=Mark.up(e,i,n).split(/\{\{\s*else\s*\}\}/);return(t===!1?r[1]:r[0])||""},_bridge:function(t,e){"."==e&&(e="\\.");var i,n,r="{{\\s*"+e+"([^/}]+\\w*)?}}|{{/"+e+"\\s*}}",o=new RegExp(r,"g"),s=t.match(o)||[],a=0,l=0,c=-1,h=0;for(n=0;n<s.length&&(i=n,c=t.indexOf(s[i],c+1),s[i].indexOf("{{/")>-1?l++:a++,a!==l);n++);return a=t.indexOf(s[0]),l=a+s[0].length,h=c+s[i].length,[t.substring(a,h),t.substring(l,c)]}};Mark.up=function(t,e,i){e=e||{},i=i||{};var n,r,o,s,a,l,c,h,u,p,f=/\{\{(.+?)\}\}/g,d=t.match(f)||[],g=[],v=0,m=0;for(i.pipes&&this._copy(i.pipes,this.pipes),i.includes&&this._copy(i.includes,this.includes),i.globals&&this._copy(i.globals,this.globals),i.delimiter&&(this.delimiter=i.delimiter),void 0!==i.compact&&(this.compact=i.compact);n=d[v++];)if(c=void 0,l="",s=n.indexOf("/}}")>-1,r=n.substr(2,n.length-(s?5:4)),r=r.replace(/`(.+?)`/g,function(t,i){return Mark.up("{{"+i+"}}",e)}),a=0===r.trim().indexOf("if "),g=r.split("|"),g.shift(),r=r.replace(/^\s*if/,"").split("|").shift().trim(),o=a?"if":r.split("|")[0],p=e[r],a&&!g.length&&(g=["notempty"]),!s&&t.indexOf("{{/"+o)>-1&&(c=this._bridge(t,o),n=c[0],l=c[1],v+=n.match(f).length-1),!/^\{\{\s*else\s*\}\}$/.test(n)){if(void 0!==(h=this.globals[r]))c=this._eval(h,g,l);
else if(u=this.includes[r])u instanceof Function&&(u=u()),c=this._pipe(Mark.up(u,e,i),g);else if(r.indexOf("#")>-1)i.iter.sign=r,c=this._pipe(i.iter,g);else if("."===r)c=this._pipe(e,g);else if(r.indexOf(".")>-1){for(r=r.split("."),p=Mark.globals[r[0]],p?m=1:(m=0,p=e);p&&m<r.length;)p=p[r[m++]];c=this._eval(p,g,l)}else a?c=this._pipe(p,g):p instanceof Array?c=this._eval(p,g,l):l?c=p?Mark.up(l,p):void 0:e.hasOwnProperty(r)&&(c=this._pipe(p,g));c instanceof Array&&(c=this._eval(c,g,l)),a&&(c=this._test(c,l,e,i)),t=t.replace(n,void 0===c?"???":c)}return this.compact?t.replace(/>\s+</g,"><"):t},Mark.pipes={empty:function(t){return t&&0!==(t+"").trim().length?!1:t},notempty:function(t){return t&&(t+"").trim().length?t:!1},blank:function(t,e){return t||0===t?t:e},more:function(t,e){return Mark._size(t)>e?t:!1},less:function(t,e){return Mark._size(t)<e?t:!1},ormore:function(t,e){return Mark._size(t)>=e?t:!1},orless:function(t,e){return Mark._size(t)<=e?t:!1},between:function(t,e,i){return t=Mark._size(t),t>=e&&i>=t?t:!1},equals:function(t,e){return t==e?t:!1},notequals:function(t,e){return t!=e?t:!1},like:function(t,e){return new RegExp(e,"i").test(t)?t:!1},notlike:function(t,e){return Mark.pipes.like(t,e)?!1:t},upcase:function(t){return String(t).toUpperCase()},downcase:function(t){return String(t).toLowerCase()},capcase:function(t){return t.replace(/(?:^|\s)\S/g,function(t){return t.toUpperCase()})},chop:function(t,e){return t.length>e?t.substr(0,e)+"...":t},tease:function(t,e){var i=t.split(/\s+/);return i.slice(0,e).join(" ")+(i.length>e?"...":"")},trim:function(t){return t.trim()},pack:function(t){return t.trim().replace(/\s{2,}/g," ")},round:function(t){return Math.round(+t)},clean:function(t){return String(t).replace(/<\/?[^>]+>/gi,"")},size:function(t){return t.length},length:function(t){return t.length},reverse:function(t){return[].concat(t).reverse()},join:function(t,e){return t.join(e)},limit:function(t,e,i){return t.slice(+i||0,+e+(+i||0))},split:function(t,e){return t.split(e||",")},choose:function(t,e,i){return t?e:i||""},toggle:function(t,e,i,n){return i.split(",")[e.match(/\w+/g).indexOf(t+"")]||n},sort:function(t,e){var i=function(t,i){return t[e]>i[e]?1:-1};return[].concat(t).sort(e?i:void 0)},fix:function(t,e){return(+t).toFixed(e)},mod:function(t,e){return+t%+e},divisible:function(t,e){return t&&+t%e===0?t:!1},even:function(t){return t&&0===(1&+t)?t:!1},odd:function(t){return t&&1===(1&+t)?t:!1},number:function(t){return parseFloat(t.replace(/[^\-\d\.]/g,""))},url:function(t){return encodeURI(t)},bool:function(t){return!!t},falsy:function(t){return!t},first:function(t){return 0===t.idx},last:function(t){return t.idx===t.size-1},call:function(t,e){return t[e].apply(t,[].slice.call(arguments,2))},set:function(t,e){return Mark.globals[e]=t,""},log:function(t){return console.log(t),t}},"function"!=typeof String.prototype.trim&&(String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g,"")}),"undefined"!=typeof module&&module.exports?module.exports=Mark:"function"==typeof define&&define.amd&&define(function(){return Mark});var guiaTV=function(t){"use strict";function e(){var e,i=t.Deferred();return setTimeout(function(){e=["telecinco","antena3","la2","la1","cuatro","lasexta","historia"],v=[1,2,3,4,5,6,7],i.resolve(e)},3e3),i.promise()}function i(e){{var i=[],n=[];e.length}return t.when.apply(null,t.map(e,function(e,r){var o="datos/"+e+".json";n.push(t.get(o).done(function(t){m[r]=i[r]=t}).fail(function(){m[r]=i[r]=""}))})),t.when.apply(null,n).promise()}function n(e,i){var n=e||d,o=i||m,s={},a='<div id="{{idcanal}}" class="lineaCanal clearfix"></div>';t.each(n,function(t,e){s.idcanal=e;var i=Mark.up(a,s);k.append(i)}),t.each(o,function(e,i){var n=i.canal.nombre,o=t("#"+n);t.each(i.programas,function(t,e){var i=r(t,e);o.append(i)})})}function r(t,e){var i,n,r={},o='<div class="itemPrograma" id="{{id_programa}}" data-url="{{url_ficha}}"style="width:{{dur}}; left:{{diffHoraDia}};"><div class="itemProgramaInner {{clase}}"><a href="http://elmundo.es/television/programa/{{id_programa}}" style="display:none;">{{nombre}}</a><span class="categoria">{{categoria}}</span><h4>{{nombre}}</h4>{{if episodio}}<p>{{episodio}}</p>{{/if}}<span class="duracion">{{duracion}}</span><span class="fecha">{{infoHoraDuracion}}</span>{{if fav}}<span class="favorito"><i class="fa fa-star"></i></span>{{/if}}{{if ale}}<span class="alerta"><i class="fa fa-clock-o"></i></span>{{/if}}</div>{{if saleCruz}}<div class="mascara"><i class="fa fa-plus"></i></div>{{/if}}</div>',s=e.categoria;switch(s){case"1":n="catSeries",i="series";break;case"104":n="catCine",i="cine";break;case"31":n="catMagazines",i="magazines";break;case"20":n="catInformativos",i="informativos";break;case"90":n="catDeportes",i="deportes";break;case"INT_2":n="catConcursos",i="concursos";break;case"INT_1":n="catCorazon",i="corazón"}var a=e.duracion+" mins.",l=Math.ceil(y*e.duracion),c=new Date(e.hora_inicio),h=new Date(e.hora_fin),u=c-x;u=Math.floor(Math.floor(u/1e3)/60*y);var p=c.getHours();p=leftPad(p,2);var f=c.getMinutes();f=leftPad(f,2);var d=h.getHours();d=leftPad(d,2);var g=h.getMinutes();g=leftPad(g,2);var v=""+p+":"+f+" - "+d+":"+g;if(100*Math.random()<5)var m=!0;if(100*Math.random()<5)var b=!0;if(e.duracion<15)var w=!0;r={clase:n,dur:l+"px",diffHoraDia:u+"px",id_programa:e.id_programa,url_ficha:e.url_ficha,infoHoraDuracion:v,duracion:a,categoria:i.toUpperCase(),nombre:e.nombre,episodio:e.episodio,fav:void 0|m,ale:void 0|b,saleCruz:void 0|w};var T=Mark.up(o,r);return T}function o(e){var i=e||d,n={},r='<div class="itemCanal"><img src="http://estaticos.elmundo.es{{icono}}" /></div>';t.each(i,function(t){n.icono=m[t].canal.icono;var e=Mark.up(r,n);O.append(e)})}function s(){var t,e,i=new Date,n={};n.dias=[],n.horas=[];var r='{{dias}}<div class="itemDia" style="left:{{pos}}px">{{dia}}</div>{{/dias}}{{horas}}<div class="itemHoras" style="left:{{pos}}px;">{{texto}}</div>{{/horas}}';for(e=0;3>=e;e++){i.setTime(x.getTime()+864e5*e);var o=i.toLocaleDateString("es-ES",{weekday:"long",month:"long",day:"numeric"}),s=e*S*24;for(n.dias.push({dia:o,pos:s}),b.push([o,s]),t=0;24>t;t++){var a=leftPad(t,2)+":00",l=e*S*24+t*S;n.horas.push({texto:a,pos:l})}}var c=Mark.up(r,n);E.append(c)}function a(){var t={},e='<li class="itemDia" data-px="{{px}}"><a href="javascript://">{{diaText}}</a></li>';b.forEach(function(i){var n=i[0],r=i[1];t={diaText:n,px:r};var o=Mark.up(e,t);D.find("ul").append(o)})}function l(){var e=C.h,i=C.m,n=t(".horaActual").hide().find("p").text(e+":"+i).end().show(),r=parseInt(e)*S+parseInt(i)*y;n.css({left:r})}function c(){var t=.5*M.width(),e=parseInt(_.css("left"));e=parseInt(t-e),k.stop().animate({left:e+"px"},300),E.stop().animate({left:e+"px"},300);var i=parseInt(C.h)*S,n=parseInt(C.m)*y,r=i+n+e;_.stop().animate({left:r+"px"},300)}function h(){function e(t,e,i,n){if("start"==e)this.startTop=parseInt(this.css("top")),this.startLeft=parseInt(this.css("left")),k.addClass("dragging");else if("move"==e){var r=0,o=0;("up"==i||"down"==i)&&(o="up"==i?-n:n),("left"==i||"right"==i)&&(r="left"==i?-n:n);var s=this.startTop+o,a=this.startLeft+r;s>w&&(s=w),u-f>s&&(s=u-f),a>d+Math.abs(b)+50&&(a=d+Math.abs(b)+50),a<p-50-Math.abs(H)&&(a=p-50-Math.abs(H)),k.css({top:s+"px",left:a+"px"}),O.css({top:s+"px"}),E.css({left:a+"px"});var l=parseInt(C.h)*S,c=parseInt(C.m)*y,h=l+c+a;_.css({left:h+"px"})}else if("cancel"==e)k.removeClass("dragging");else if("end"==e)return k.removeClass("dragging"),!1}function i(){var e=parseInt(t(this).css("left"));e=parseInt(.5*p-e),l(e)}function n(){var e=-1*parseInt(t(this).data("px"));l(e+d)}function r(e,i){var n=t(i).is(".itemPrograma")?t(i):t(i).closest(".itemPrograma"),r=n.find("a").attr("href"),s=n.attr("id");o(s,r);var a=parseInt(n.css("left"))+.5*n.width();a=parseInt(.5*p-a),l(a)}function o(e){function i(){0===parseInt($.css("right"))&&$.stop().animate({right:-S},300,"swing")}i(),t.ajax({url:"fichaPrograma.html",data:{progId:e},dataType:"html",cache:!1}).done(function(t){$.find(".contenido").html(t),$.find(".nano").nanoScroller({scroll:"top",preventPageScrolling:!0,alwaysVisible:!0,iOSNativeScrolling:!0}),$.animate({right:0},500,"swing",function(){$.find(".cierra").on("click",function(t){t.preventDefault(),i()})})})}function s(e){var i=t(e.currentTarget).attr("class").split(" ")[0];k.hasClass(i)?(k.removeClass(i),t(this).removeClass("activo")):(k.addClass(i),t(this).addClass("activo"))}function a(){v.length>=1&&t.each(v,function(t,e){e++,P.find("li:nth-child("+e+")").trigger("click")})}function l(t){var e=t||0;k.stop().animate({left:e+"px"},300),E.stop().animate({left:e+"px"},300);var i=parseInt(C.h)*S,n=parseInt(C.m)*y,r=i+n+e;_.stop().animate({left:r+"px"},300)}function c(e){var i=t(e.currentTarget).attr("class").split(" ")[1],n=k.css("top").split("px")[0],r=O.css("top").split("px")[0],o=O.length;switch(i){case"btnArriba":r-T>w?(O.css("top",r-T),k.css("top",n-T)):(O.css("top",w+"px"),k.css("top",w+"px"));break;case"btnAbajo":var s=r-o*T;s>r+T?(O.css("top",r+T),k.css("top",n+T)):(O.css("top",s+"px"),k.css("top",s+"px"))}}function h(e){var i=t(e.currentTarget).attr("class").split(" ")[1],n=parseInt(k.css("left"));switch(e.stopPropagation(),console.log(n),i){case"btnIzda":l(Math.floor(parseInt(n+S)));break;case"btnDrcha":l(Math.floor(parseInt(n-S)))}}var u=M.height(),p=M.width(),f=k.height(),d=(k.offsetWidth,O.width()),g=t(".contProgramas > div > div:first-child"),m=[];t.each(g,function(){m.push(this.offsetLeft)});var b=m.min(),x=t(".contProgramas > div > div:last-child"),A=[];t.each(x,function(){A.push(this.offsetLeft+t(this).width())});var H=A.max();M.find(".preload-wrapper").remove(),k.swipe({tap:function(t,e){r(t,e)},triggerOnTouchEnd:!0,swipeStatus:e,threshold:10,allowPageScroll:!1,excludedElements:t.fn.swipe.defaults.excludedElements+", .horaActual",fingers:"all"}),E.on("click",".itemHoras",i),P.on("click","li",s),a(),D.on("click","li",n),R.on("click",".btn",c),I.on("click",".btn",h)}function u(){var e=t('<ul class="listaCanales clearfix">'),i="datos/listadocanales.json",n={},r='{{letras}}<li class="itemLetra" data-letra="{{.}}">{{.}}</li>{{/letras}}';n.letras=[],t.get(i).done(function(i){g=i;var o={},s='{{canales}}<li class="itemCanal" data-letra="{{currentLetra}}" data-idcanal="{{id_programa}}"><span class="check"></span>{{nombre_completo|chop>23}}</li>{{/canales}}';t.each(g,function(t,i){Mark.globals.currentLetra=t,o={letra:t,canales:i},n.letras.push(t);var r=Mark.up(s,o);e.append(r)});var a=Mark.up(r,n);H.find(".listaLetras").append(a),H.find(".nano-content").html(e),t.each(H.find(".itemCanal"),function(){-1!=d.indexOf(t(this).data("idcanal"))&&t(this).find(".check").addClass("sel")}),H.find(".nano").nanoScroller({scroll:"top",preventPageScrolling:!0,alwaysVisible:!0,iOSNativeScrolling:!0})})}function p(){var e=t('<ul class="orden vertical">'),i={},n='<li class="itemCanal" data-idcanal="{{nombre}}"><span class="check sel"></span>{{nombre_completo|chop>23}}</li>';t.each(m,function(t,r){i=r.canal;var o=Mark.up(n,i);e.append(o)}),L.find(".nano-content").html(e),L.find(".nano").nanoScroller({scroll:"top",preventPageScrolling:!0,alwaysVisible:!0,iOSNativeScrolling:!0})}function f(){function e(){var e=t(this).find(".check"),i=e.hasClass("sel"),n=t(this).data("idcanal"),r=L.find(".itemCanal").filter(function(){return t(this).data("idcanal")===n});i?(e.toggleClass("sel"),r.find(".check").toggleClass("sel")):(e.toggleClass("sel"),r.length?r.find(".check").toggleClass("sel"):t(this).clone().appendTo(L.find("ul"))),L.find(".nano").nanoScroller().nanoScroller({scroll:"bottom",alwaysVisible:!0})}function i(e){e.stopPropagation();var i=t(this).parent(".itemCanal").data("idcanal"),n=H.find(".itemCanal").filter(function(){return t(this).data("idcanal")===i});t(this).toggleClass("sel"),n.find(".check").toggleClass("sel")}function n(){t(this).toggleClass("activo"),A.toggle("fast"),L.find(".nano").nanoScroller().nanoScroller({scroll:"top",alwaysVisible:!0}),H.find(".nano").nanoScroller().nanoScroller({scroll:"top",alwaysVisible:!0})}function r(){var e=t(this).data("letra"),i=H.find(".itemCanal"),n=t(this).hasClass("activo");if(n)i.show(),t(this).removeClass("activo");else{var r=i.filter(function(){return t(this).data("letra")==e});r.show(),i.not(r).hide(),t(this).addClass("activo")}H.find(".nano").nanoScroller().nanoScroller({scroll:"top",alwaysVisible:!0})}function o(){var e,i=t("#txtBuscar"),n=i.val(),r=H.find(".itemCanal");n.length>=3&&" "!=n&&""!=n&&void 0!=n&&(e=r.filter(function(){var e=t.trim(t(this).text());return e.indexOf(n)>-1})),e.show(),r.not(e).hide()}H.on("click",".itemCanal",e),L.on("click",".check",i),N.on("click",n),H.on("click",".itemLetra",r),H.on("click",".fa-search",o),t("#txtBuscar").on("keyup",o);var s,a=t(".ordenCanales ul.orden").sortable({group:"orden",pullPlaceholder:!0,onDrop:function(e,i,n){var r=a.sortable("serialize").get(),o=(JSON.stringify(r,null," "),t("<li/>").css({height:0}));e.before(o),o.detach(),n(e,i)},onDragStart:function(e,i,n){var r=e.offset(),o=i.rootGroup.pointer,a=t(".ordenCanales .nano .nano-content").get(0).scrollTop;a=Math.floor(a),s={left:o.left-r.left,top:o.top-r.top-a},n(e,i)},onDrag:function(t,e){t.css({left:e.left-s.left,top:e.top-s.top})}})}var d=["la1","la2","antena3","cuatro","telecinco","lasexta"],g={},v=[],m=[],b=[],w=60,T=90,S=320,y=S/60,x=new Date,C={h:leftPad(x.getHours(),2),m:leftPad(x.getMinutes(),2)};x.setTime(Date.parse("Mon, Jul 14 2014"));var M=t(".viewPort"),P=t(".selectorCategorias"),D=t(".selectorDias"),k=t(".contProgramas"),O=t(".contCanales"),E=t(".barraHoras"),I=t(".iconosHoras"),_=t(".horaActual"),$=t(".fichaPrograma"),A=t(".selectorCanales"),H=t(".barraLetras"),L=t(".ordenCanales"),R=t(".botonesCanales"),N=t(".suscribirCanales");return function(){A.hide();{var t=e();t.then(function(t){return d=t,i(d)}).then(function(){o(d),n(d,m),s(),a(),l(),c(),h(),p(),u(),f()})}}(),t.fn.exists=function(){return this.length>0},this}(jq111);Array.prototype.max=function(){for(var t=this[0],e=this.length,i=1;e>i;i++)this[i]>t&&(t=this[i]);return t},Array.prototype.min=function(){for(var t=this[0],e=this.length,i=1;e>i;i++)this[i]<t&&(t=this[i]);return t};
//# sourceMappingURL=data:application/json;base64,